name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          docker exec arch-builder pacman -Syu --noconfirm
          docker exec arch-builder pacman -S --noconfirm archiso git base-devel wget

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* .

          # Crear lista de paquetes personalizada
          cat > packages.x86_64 << "PKGEOF"
          # Base system
          base
          base-devel
          linux
          linux-firmware
          mkinitcpio
          mkinitcpio-archiso
          mkinitcpio-nfs-utils
          archiso

          # Boot
          syslinux
          efibootmgr
          grub
          os-prober

          # Filesystem tools
          dosfstools
          e2fsprogs
          ntfs-3g
          exfatprogs
          btrfs-progs
          xfsprogs
          f2fs-tools
          jfsutils

          # Network
          networkmanager
          network-manager-applet
          dhcpcd
          wpa_supplicant
          wireless_tools
          iwd
          inetutils
          dnsutils
          nftables
          iptables-nft
          reflector

          # Hardware support
          mesa
          xf86-video-intel
          xf86-video-amdgpu
          xf86-video-nouveau
          xf86-video-ati
          xf86-video-vesa
          xf86-input-libinput
          vulkan-intel
          vulkan-radeon

          # Audio
          pipewire
          pipewire-alsa
          pipewire-pulse
          pipewire-jack
          wireplumber
          pavucontrol

          # KDE Plasma (completo pero optimizado)
          plasma-desktop
          plasma-nm
          plasma-pa
          plasma-systemmonitor
          powerdevil
          sddm
          sddm-kcm
          breeze
          breeze-gtk
          kde-gtk-config
          kscreen
          kinfocenter
          systemsettings
          plasma-workspace-wallpapers

          # Aplicaciones KDE esenciales
          konsole
          dolphin
          kate
          ark
          spectacle
          okular
          gwenview
          kcalc
          kwrite

          # Navegador y multimedia
          firefox
          vlc

          # System tools
          htop
          fastfetch
          git
          vim
          nano
          wget
          curl
          rsync
          tree
          lsof
          which
          sudo

          # Fonts
          ttf-dejavu
          ttf-liberation
          noto-fonts
          noto-fonts-emoji
          terminus-font

          # Archive tools
          zip
          unzip
          p7zip
          unrar

          # Live system and installation tools
          arch-install-scripts
          gparted
          testdisk
          ddrescue
          parted
          gdisk
          dialog

          # Development tools (optional)
          python
          python-pip

          # Additional utilities
          man-db
          man-pages
          PKGEOF
          '

      - name: Create installer script
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/usr/local/bin

          cat > airootfs/usr/local/bin/arch-installer << "INSTALLEREOF"
          #!/bin/bash

          # Arch Linux Automatic Installer - 100% Automatico
          set -e

          # Colores
          RED="\033[0;31m"
          GREEN="\033[0;32m"
          YELLOW="\033[1;33m"
          BLUE="\033[0;34m"
          NC="\033[0m"

          print_msg() {
              echo -e "${GREEN}[INFO]${NC} $1"
          }

          print_warning() {
              echo -e "${YELLOW}[WARNING]${NC} $1"
          }

          print_error() {
              echo -e "${RED}[ERROR]${NC} $1"
          }

          print_title() {
              echo -e "${BLUE}=== $1 ===${NC}"
          }

          check_root() {
              if [ $(id -u) -ne 0 ]; then
                  print_error "Este script debe ejecutarse como root"
                  exit 1
              fi
          }

          check_internet() {
              print_msg "Verificando conexión a internet..."
              if ! ping -c 1 archlinux.org > /dev/null 2>&1; then
                  print_error "No hay conexión a internet"
                  exit 1
              fi
              print_msg "Conexión a internet OK"
          }

          detect_nvme() {
              print_msg "Detectando disco NVMe..."

              # Buscar discos NVMe
              NVME_DISK=""
              for disk in /dev/nvme*n1; do
                  if [ -b "$disk" ]; then
                      NVME_DISK="$disk"
                      break
                  fi
              done

              if [ -z "$NVME_DISK" ]; then
                  print_error "No se encontró disco NVMe. Buscando alternativas..."
                  # Buscar otros discos como respaldo
                  for disk in /dev/sda /dev/sdb /dev/vda; do
                      if [ -b "$disk" ]; then
                          NVME_DISK="$disk"
                          print_warning "Usando $disk como disco de instalación"
                          break
                      fi
                  done
              fi

              if [ -z "$NVME_DISK" ]; then
                  print_error "No se encontró ningún disco para instalar"
                  exit 1
              fi

              print_msg "Disco seleccionado: $NVME_DISK"
              echo "$NVME_DISK"
          }

          partition_disk_auto() {
              local DISK="$1"
              print_title "Particionando disco automáticamente: $DISK"

              # Limpiar disco completamente
              print_msg "Limpiando disco..."
              wipefs -af "$DISK"
              sgdisk --zap-all "$DISK"

              # Crear tabla de particiones GPT
              print_msg "Creando tabla de particiones GPT..."

              if [ -d /sys/firmware/efi/efivars ]; then
                  print_msg "Sistema UEFI - Creando particiones EFI + Root"
                  # UEFI: EFI (512MB) + Root (resto)
                  sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"EFI" "$DISK"
                  sgdisk -n 2:0:0 -t 2:8300 -c 2:"Root" "$DISK"

                  # Variables para particiones
                  EFI_PART="${DISK}p1"
                  ROOT_PART="${DISK}p2"

                  # Si es un disco SATA, usar formato /dev/sdaX
                  if [[ "$DISK" == /dev/sd* ]]; then
                      EFI_PART="${DISK}1"
                      ROOT_PART="${DISK}2"
                  fi
              else
                  print_msg "Sistema BIOS - Creando partición Root única"
                  # BIOS: Solo Root
                  sgdisk -n 1:0:0 -t 1:8300 -c 1:"Root" "$DISK"
                  ROOT_PART="${DISK}p1"

                  if [[ "$DISK" == /dev/sd* ]]; then
                      ROOT_PART="${DISK}1"
                  fi
              fi

              # Esperar a que el kernel reconozca las particiones
              print_msg "Esperando reconocimiento de particiones..."
              sleep 3
              partprobe "$DISK"
              sleep 2
          }

          format_partitions_auto() {
              print_title "Formateando particiones automáticamente"

              if [ -d /sys/firmware/efi/efivars ]; then
                  print_msg "Formateando partición EFI: $EFI_PART"
                  mkfs.fat -F32 "$EFI_PART"

                  print_msg "Formateando partición Root: $ROOT_PART"
                  mkfs.ext4 -F "$ROOT_PART"

                  print_msg "Montando particiones..."
                  mount "$ROOT_PART" /mnt
                  mkdir -p /mnt/boot/efi
                  mount "$EFI_PART" /mnt/boot/efi
              else
                  print_msg "Formateando partición Root: $ROOT_PART"
                  mkfs.ext4 -F "$ROOT_PART"

                  print_msg "Montando partición..."
                  mount "$ROOT_PART" /mnt
              fi
          }

          install_base_auto() {
              print_title "Instalando sistema base automáticamente"

              print_msg "Actualizando mirrors..."
              reflector --country Spain,France,Germany --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

              print_msg "Instalando paquetes base..."
              pacstrap /mnt base linux linux-firmware base-devel grub networkmanager

              print_msg "Generando fstab..."
              genfstab -U /mnt >> /mnt/etc/fstab
          }

          install_kde_auto() {
              print_title "Instalando KDE Plasma automáticamente"

              print_msg "Instalando KDE y aplicaciones..."
              arch-chroot /mnt pacman -S --noconfirm \
                  plasma-desktop \
                  sddm \
                  konsole \
                  dolphin \
                  kate \
                  firefox \
                  spectacle \
                  okular \
                  gwenview \
                  ark \
                  breeze \
                  breeze-gtk \
                  kde-gtk-config \
                  plasma-nm \
                  plasma-pa \
                  powerdevil

              print_msg "Habilitando SDDM..."
              arch-chroot /mnt systemctl enable sddm.service
          }

          configure_system_auto() {
              print_title "Configurando sistema automáticamente"

              print_msg "Configurando zona horaria..."
              arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Madrid /etc/localtime
              arch-chroot /mnt hwclock --systohc

              print_msg "Configurando idioma..."
              arch-chroot /mnt sed -i "s/#es_ES.UTF-8/es_ES.UTF-8/" /etc/locale.gen
              arch-chroot /mnt sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
              arch-chroot /mnt locale-gen
              echo "LANG=es_ES.UTF-8" > /mnt/etc/locale.conf
              echo "KEYMAP=es" > /mnt/etc/vconsole.conf

              print_msg "Configurando hostname..."
              echo "playnix-arch" > /mnt/etc/hostname
              cat > /mnt/etc/hosts << EOF
          127.0.0.1   localhost
          ::1         localhost
          127.0.1.1   playnix-arch.localdomain playnix-arch
          EOF

              print_msg "Configurando contraseña de root..."
              arch-chroot /mnt bash -c "echo 'root:playnix' | chpasswd"

              print_msg "Creando usuario playnix..."
              arch-chroot /mnt useradd -m -G wheel,audio,video,storage,optical,network,power -s /bin/bash playnix
              arch-chroot /mnt bash -c "echo 'playnix:playnix' | chpasswd"

              print_msg "Configurando sudo..."
              arch-chroot /mnt sed -i "s/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/" /etc/sudoers

              print_msg "Habilitando NetworkManager..."
              arch-chroot /mnt systemctl enable NetworkManager.service
          }

          install_bootloader_auto() {
              print_title "Instalando bootloader automáticamente"

              if [ -d /sys/firmware/efi/efivars ]; then
                  print_msg "Instalando GRUB para UEFI..."
                  arch-chroot /mnt pacman -S --noconfirm efibootmgr
                  arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH
              else
                  print_msg "Instalando GRUB para BIOS..."
                  arch-chroot /mnt grub-install --target=i386-pc "$NVME_DISK"
              fi

              print_msg "Generando configuración de GRUB..."
              arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
          }

          configure_sddm_auto() {
              print_title "Configurando SDDM para autologin"

              print_msg "Configurando autologin para usuario playnix..."
              mkdir -p /mnt/etc/sddm.conf.d
              cat > /mnt/etc/sddm.conf.d/autologin.conf << EOF
          [Autologin]
          User=playnix
          Session=plasma

          [Theme]
          Current=breeze

          [General]
          HaltCommand=/usr/bin/systemctl poweroff
          RebootCommand=/usr/bin/systemctl reboot
          EOF
          }

          cleanup_installation() {
              print_msg "Limpiando instalación..."
              arch-chroot /mnt pacman -Scc --noconfirm
          }

          main_auto() {
              print_title "INSTALADOR AUTOMÁTICO DE ARCH LINUX + KDE"
              print_msg "Instalación completamente automática iniciada..."
              print_warning "Usuario: playnix | Contraseña: playnix"

              check_root
              check_internet

              # Detectar disco NVMe
              NVME_DISK=$(detect_nvme)

              print_warning "SE INSTALARÁ EN: $NVME_DISK"
              print_warning "TODOS LOS DATOS EN $NVME_DISK SERÁN ELIMINADOS"
              echo ""
              print_msg "La instalación comenzará en 10 segundos..."
              print_msg "Presiona Ctrl+C para cancelar"
              sleep 10

              # Proceso automático
              partition_disk_auto "$NVME_DISK"
              format_partitions_auto
              install_base_auto
              install_kde_auto
              configure_system_auto
              install_bootloader_auto
              configure_sddm_auto
              cleanup_installation

              # Finalizar
              print_msg "Desmontando particiones..."
              umount -R /mnt

              print_title "¡INSTALACIÓN COMPLETADA!"
              print_msg "Sistema instalado en: $NVME_DISK"
              print_msg "Usuario: playnix"
              print_msg "Contraseña: playnix"
              print_msg "Entorno: KDE Plasma con autologin"
              print_warning "Retira el USB e inicia desde el disco duro"

              echo ""
              read -p "¿Reiniciar ahora? (y/n): " reboot_choice
              if [ "$reboot_choice" = "y" ] || [ "$reboot_choice" = "Y" ]; then
                  print_msg "Reiniciando en 3 segundos..."
                  sleep 3
                  reboot
              fi
          }

          show_help() {
              echo "Instalador Automático de Arch Linux + KDE"
              echo ""
              echo "Opciones:"
              echo "  auto     - Instalación 100% automática (por defecto)"
              echo "  manual   - Abrir guía manual"
              echo "  help     - Mostrar ayuda"
              echo ""
              echo "CONFIGURACIÓN AUTOMÁTICA:"
              echo "  • Disco: Primer NVMe encontrado"
              echo "  • Usuario: playnix"
              echo "  • Contraseña: playnix"
              echo "  • Entorno: KDE Plasma"
              echo "  • Autologin: Habilitado"
          }

          # Ejecutar según parámetro
          case "${1:-auto}" in
              "auto"|"install")
                  main_auto
                  ;;
              "manual")
                  firefox "https://wiki.archlinux.org/title/Installation_guide" &
                  ;;
              "help"|"-h"|"--help")
                  show_help
                  ;;
              *)
                  print_error "Opción desconocida: $1"
                  show_help
                  exit 1
                  ;;
          esac
          INSTALLEREOF

          chmod +x airootfs/usr/local/bin/arch-installer
          '

      - name: Configure desktop entries
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/root/Desktop

          cat > airootfs/etc/skel/Desktop/arch-installer.desktop << "DESKTOP_EOF"
          [Desktop Entry]
          Name=Instalador de Arch Linux
          Comment=Instala Arch Linux en tu computadora
          Exec=konsole --hold -e sudo arch-installer
          Icon=system-software-install
          Terminal=false
          Type=Application
          Categories=System;
          DESKTOP_EOF

          cat > airootfs/etc/skel/Desktop/gparted.desktop << "GPARTED_EOF"
          [Desktop Entry]
          Name=GParted
          Comment=Editor de particiones
          Exec=sudo gparted
          Icon=gparted
          Terminal=false
          Type=Application
          Categories=System;
          GPARTED_EOF

          chmod +x airootfs/etc/skel/Desktop/*.desktop
          cp airootfs/etc/skel/Desktop/*.desktop airootfs/root/Desktop/
          chmod +x airootfs/root/Desktop/*.desktop
          '

      - name: Create pacman.conf
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          cat > pacman.conf << "PACMANEOF"
          [options]
          HoldPkg = pacman glibc
          Architecture = x86_64
          Color
          CheckSpace
          ParallelDownloads = 10
          SigLevel = Required DatabaseOptional
          LocalFileSigLevel = Optional

          [core]
          Include = /etc/pacman.d/mirrorlist

          [extra]
          Include = /etc/pacman.d/mirrorlist

          [multilib]
          Include = /etc/pacman.d/mirrorlist
          PACMANEOF
          '

      - name: Configure system customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/.config
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/etc/sddm.conf.d

          cat > airootfs/root/customize_airootfs.sh << "CUSTOMEOF"
          #!/usr/bin/env bash
          set -e -u

          echo "Iniciando customización..."

          # Locale
          sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
          sed -i "s/#es_ES.UTF-8/es_ES.UTF-8/" /etc/locale.gen
          locale-gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          echo "KEYMAP=es" > /etc/vconsole.conf

          # Timezone
          ln -sf /usr/share/zoneinfo/UTC /etc/localtime

          # Usuario
          useradd -m -G wheel,audio,video,storage,network -s /bin/bash liveuser
          passwd -d liveuser
          passwd -d root
          echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Servicios
          systemctl enable NetworkManager.service
          systemctl enable sddm.service

          # SDDM autologin
          cat > /etc/sddm.conf.d/autologin.conf << EOF
          [Autologin]
          User=liveuser
          Session=plasma
          [Theme]
          Current=breeze
          EOF

          # Hostname
          echo "archiso-kde" > /etc/hostname

          # Bashrc
          cat >> /home/liveuser/.bashrc << EOF
          alias ll="ls -la"
          echo "=== Arch Linux KDE Live ==="
          echo "Usuario: liveuser (sin contraseña)"
          EOF

          chown -R liveuser:liveuser /home/liveuser
          pacman -Scc --noconfirm
          CUSTOMEOF

          chmod +x airootfs/root/customize_airootfs.sh
          '

      - name: Configure boot
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # GRUB
          mkdir -p grub
          cat > grub/grub.cfg << "GRUBEOF"
          set default="0"
          set timeout=5

          menuentry "Arch Linux KDE Live" {
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }
          GRUBEOF

          # Syslinux
          cat > syslinux/archiso_sys-linux.cfg << "SYSEOF"
          LABEL arch64
          MENU LABEL Arch Linux KDE Live
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet
          SYSEOF

          # SystemD-boot
          mkdir -p efiboot/loader/entries
          cat > efiboot/loader/loader.conf << "LOADEREOF"
          default archiso-x86_64-linux.conf
          timeout 3
          LOADEREOF

          cat > efiboot/loader/entries/archiso-x86_64-linux.conf << "ENTRYEOF"
          title Arch Linux KDE Live
          linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          options archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet
          ENTRYEOF

          # Profile
          cat > profiledef.sh << "PROFILEEOF"
          #!/usr/bin/env bash
          iso_name="archlinux-kde"
          iso_label="ARCH_KDE_$(date +%Y%m)"
          iso_publisher="Arch Linux KDE Live"
          iso_application="Arch Linux KDE Live CD"
          iso_version="$(date +%Y.%m.%d)"
          install_dir="arch"
          buildmodes=("iso")
          bootmodes=("bios.syslinux.mbr" "bios.syslinux.eltorito" "uefi-x64.systemd-boot.esp" "uefi-x64.systemd-boot.eltorito")
          arch="x86_64"
          pacman_conf="pacman.conf"
          airootfs_image_type="squashfs"
          airootfs_image_tool_options=("-comp" "xz" "-b" "1M")
          file_permissions=(
            ["/root"]="0:0:750"
            ["/root/customize_airootfs.sh"]="0:0:755"
            ["/usr/local/bin/arch-installer"]="0:0:755"
          )
          PROFILEEOF
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          echo "=== Archivos del proyecto ==="
          ls -la
          echo "=== Construyendo ISO ==="
          mkarchiso -v -w work -o out .
          ls -la out/
          '
          mkdir -p iso-output
          docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/
          ls -lh ./iso-output/

      - name: Cleanup
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # 🐧 Arch Linux Live CD con KDE Plasma

            ## ✨ Características:
            - **Entorno**: KDE Plasma completo
            - **Usuario**: `liveuser` (sin contraseña, autologin)
            - **Red**: NetworkManager habilitado
            - **Instalador**: Script guiado incluido

            ## 📦 Aplicaciones:
            - Firefox, Konsole, Dolphin, Kate
            - GParted, Instalador de Arch Linux
            - Spectacle, Okular, Gwenview, VLC

            ## 💻 Requisitos:
            - **RAM**: 2GB mín, 4GB recomendado
            - **Arch**: x86_64
            - **Boot**: UEFI/BIOS compatible

            ## 🚀 Uso:
            1. Descarga la ISO
            2. Graba en USB con Rufus/Etcher
            3. Arranca desde USB
            4. Usa "Instalador de Arch Linux" del escritorio

            **Tamaño**: ~2.5GB
          files: iso-output/*.iso
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
