name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          docker exec arch-builder pacman -Syu --noconfirm
          docker exec arch-builder pacman -S --noconfirm archiso git base-devel wget

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* .

          # Crear lista de paquetes personalizada (añadiendo herramientas necesarias)
          cat > packages.x86_64 << "PKGEOF"
          # Base system
          base
          base-devel
          linux
          linux-firmware
          mkinitcpio
          mkinitcpio-archiso
          mkinitcpio-nfs-utils
          archiso
          nbd

          # Boot
          syslinux
          efibootmgr
          grub
          os-prober

          # Filesystem tools
          dosfstools
          e2fsprogs
          ntfs-3g
          exfatprogs
          btrfs-progs
          xfsprogs
          f2fs-tools
          jfsutils

          # Network
          networkmanager
          network-manager-applet
          dhcpcd
          wpa_supplicant
          wireless_tools
          iwd
          inetutils
          dnsutils
          nftables
          iptables-nft
          reflector

          # Hardware support
          mesa
          xf86-video-amdgpu
          xf86-video-ati
          xf86-input-libinput
          vulkan-radeon

          # Audio
          pipewire
          pipewire-alsa
          pipewire-pulse
          pipewire-jack
          wireplumber
          pavucontrol

          # KDE Plasma (completo pero optimizado)
          plasma-desktop
          plasma-nm
          plasma-pa
          powerdevil
          sddm
          sddm-kcm
          breeze
          breeze-gtk
          kde-gtk-config
          kscreen
          kinfocenter
          systemsettings

          # Aplicaciones KDE esenciales
          konsole
          dolphin
          ark
          okular
          gwenview

          # Navegador y multimedia
          firefox

          # System tools
          htop
          fastfetch
          git
          vim
          nano
          wget
          curl
          rsync
          tree
          lsof
          which
          sudo

          # Fonts
          ttf-dejavu
          ttf-liberation
          noto-fonts
          noto-fonts-emoji
          terminus-font

          # Archive tools
          zip
          unzip
          p7zip
          unrar

          # Live system and installation tools
          arch-install-scripts
          archinstall
          gparted
          parted
          dialog

          # Development tools (optional)
          python
          python-pip

          # Additional utilities
          man-db
          man-pages

          # Plymouth para splash screen
          plymouth

          # Herramientas adicionales para configuración de escritorio
          xdg-utils
          xdg-user-dirs
          PKGEOF
          '

      - name: Create archinstall configuration
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/usr/local/bin
          mkdir -p airootfs/etc/archinstall

          # Crear user_configuration.json (tu configuración corregida)
          cat > airootfs/etc/archinstall/user_configuration.json << "CONFIGEOF"
          {
            "archinstall-language": "English",
            "audio_config": {
              "audio": "pipewire"
            },
            "bootloader": "Grub",
            "custom_commands": [],
            "disk_config": {
              "btrfs_options": {
                "snapshot_config": null
              },
              "config_type": "default_layout",
              "device_modifications": [
                {
                  "device": "/dev/nvme0n1",
                  "partitions": [
                    {
                      "btrfs": [],
                      "dev_path": null,
                      "flags": ["boot", "esp"],
                      "fs_type": "fat32",
                      "mount_options": [],
                      "mountpoint": "/boot",
                      "obj_id": "592c23ff-1230-495d-aea9-c6af6ef3de13",
                      "size": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "GiB",
                        "value": 1
                      },
                      "start": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "MiB",
                        "value": 1
                      },
                      "status": "create",
                      "type": "primary"
                    },
                    {
                      "btrfs": [],
                      "dev_path": null,
                      "flags": [],
                      "fs_type": "ext4",
                      "mount_options": [],
                      "mountpoint": "/",
                      "obj_id": "659fd4df-7b61-4df2-923c-f6aba8ba66a1",
                      "size": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "%",
                        "value": "100%FREE"
                      },
                      "start": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "B",
                        "value": 1074790400
                      },
                      "status": "create",
                      "type": "primary"
                    }
                  ],
                  "wipe": true
                }
              ]
            },
            "hostname": "archlinux",
            "kernels": ["linux"],
            "locale_config": {
              "kb_layout": "es",
              "sys_enc": "UTF-8",
              "sys_lang": "en_US.UTF-8"
            },
            "mirror_config": {
              "custom_repositories": [],
              "custom_servers": [],
              "mirror_regions": {
                "Spain": [
                  "https://ftp.rediris.es/mirror/archlinux/$repo/os/$arch",
                  "http://es.mirrors.cicku.me/archlinux/$repo/os/$arch",
                  "https://es.mirrors.cicku.me/archlinux/$repo/os/$arch",
                  "https://nox.panibrez.com/archlinux/$repo/os/$arch",
                  "http://mirror.raiolanetworks.com/archlinux/$repo/os/$arch",
                  "https://mirror.raiolanetworks.com/archlinux/$repo/os/$arch"
                ],
                "United States": [
                  "http://mirrors.rit.edu/archlinux/$repo/os/$arch",
                  "https://mirrors.rit.edu/archlinux/$repo/os/$arch",
                  "http://mirror.umd.edu/archlinux/$repo/os/$arch",
                  "https://mirror.umd.edu/archlinux/$repo/os/$arch",
                  "http://ftp.osuosl.org/pub/archlinux/$repo/os/$arch",
                  "https://ftp.osuosl.org/pub/archlinux/$repo/os/$arch",
                  "http://mirrors.lug.mtu.edu/archlinux/$repo/os/$arch",
                  "https://mirrors.lug.mtu.edu/archlinux/$repo/os/$arch",
                  "http://mirrors.xmission.com/archlinux/$repo/os/$arch",
                  "http://mirrors.kernel.org/archlinux/$repo/os/$arch",
                  "https://mirrors.kernel.org/archlinux/$repo/os/$arch",
                  "http://mirrors.cat.pdx.edu/archlinux/$repo/os/$arch",
                  "http://mirror.sfo12.us.leaseweb.net/archlinux/$repo/os/$arch",
                  "http://mirror.wdc1.us.leaseweb.net/archlinux/$repo/os/$arch",
                  "https://mirror.sfo12.us.leaseweb.net/archlinux/$repo/os/$arch",
                  "https://mirror.wdc1.us.leaseweb.net/archlinux/$repo/os/$arch",
                  "http://mirrors.gigenet.com/archlinux/$repo/os/$arch",
                  "http://mirrors.liquidweb.com/archlinux/$repo/os/$arch",
                  "http://mirror.metrocast.net/archlinux/$repo/os/$arch",
                  "http://dfw.mirror.rackspace.com/archlinux/$repo/os/$arch",
                  "http://iad.mirror.rackspace.com/archlinux/$repo/os/$arch",
                  "http://ord.mirror.rackspace.com/archlinux/$repo/os/$arch",
                  "https://dfw.mirror.rackspace.com/archlinux/$repo/os/$arch",
                  "https://iad.mirror.rackspace.com/archlinux/$repo/os/$arch",
                  "https://ord.mirror.rackspace.com/archlinux/$repo/os/$arch",
                  "http://mirror.vtti.vt.edu/archlinux/$repo/os/$arch",
                  "http://arch.mirror.constant.com/$repo/os/$arch",
                  "https://arch.mirror.constant.com/$repo/os/$arch",
                  "http://mirrors.acm.wpi.edu/archlinux/$repo/os/$arch",
                  "http://mirrors.ocf.berkeley.edu/archlinux/$repo/os/$arch",
                  "https://mirrors.ocf.berkeley.edu/archlinux/$repo/os/$arch",
                  "http://arlm.tyzoid.com/$repo/os/$arch",
                  "http://mirror.math.princeton.edu/pub/archlinux/$repo/os/$arch",
                  "http://us.mirrors.cicku.me/archlinux/$repo/os/$arch",
                  "https://us.mirrors.cicku.me/archlinux/$repo/os/$arch",
                  "http://mirror.cs.vt.edu/pub/ArchLinux/$repo/os/$arch",
                  "http://mirrors.sonic.net/archlinux/$repo/os/$arch",
                  "https://mirrors.sonic.net/archlinux/$repo/os/$arch",
                  "http://distro.ibiblio.org/archlinux/$repo/os/$arch",
                  "http://repo.miserver.it.umich.edu/archlinux/$repo/os/$arch",
                  "http://mirrors.xtom.com/archlinux/$repo/os/$arch",
                  "https://mirrors.xtom.com/archlinux/$repo/os/$arch",
                  "http://mirror.siena.edu/archlinux/$repo/os/$arch",
                  "http://repo.ialab.dsu.edu/archlinux/$repo/os/$arch",
                  "https://repo.ialab.dsu.edu/archlinux/$repo/os/$arch",
                  "http://iad.mirrors.misaka.one/archlinux/$repo/os/$arch",
                  "https://iad.mirrors.misaka.one/archlinux/$repo/os/$arch",
                  "http://mirror.pit.teraswitch.com/archlinux/$repo/os/$arch",
                  "https://mirror.pit.teraswitch.com/archlinux/$repo/os/$arch",
                  "http://mirror.arizona.edu/archlinux/$repo/os/$arch",
                  "https://mirror.arizona.edu/archlinux/$repo/os/$arch",
                  "http://archmirror1.octyl.net/$repo/os/$arch",
                  "https://archmirror1.octyl.net/$repo/os/$arch",
                  "http://plug-mirror.rcac.purdue.edu/archlinux/$repo/os/$arch",
                  "https://plug-mirror.rcac.purdue.edu/archlinux/$repo/os/$arch",
                  "http://mirrors.mit.edu/archlinux/$repo/os/$arch",
                  "https://mirrors.mit.edu/archlinux/$repo/os/$arch",
                  "http://arch.hu.fo/archlinux/$repo/os/$arch",
                  "https://arch.hu.fo/archlinux/$repo/os/$arch",
                  "https://zxcvfdsa.com/arch/$repo/os/$arch",
                  "http://mirror.ette.biz/archlinux/$repo/os/$arch",
                  "https://mirror.ette.biz/archlinux/$repo/os/$arch",
                  "https://mirror.theash.xyz/arch/$repo/os/$arch",
                  "http://mirrors.bloomu.edu/archlinux/$repo/os/$arch",
                  "https://mirrors.bloomu.edu/archlinux/$repo/os/$arch",
                  "http://codingflyboy.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://coresite.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://forksystems.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://irltoolkit.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://mirror.fcix.net/archlinux/$repo/os/$arch",
                  "http://mnvoip.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://nnenix.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://nocix.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://ohioix.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://opencolo.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://ridgewireless.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://southfront.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://volico.mm.fcix.net/archlinux/$repo/os/$arch",
                  "http://ziply.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://codingflyboy.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://coresite.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://forksystems.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://irltoolkit.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://mirror.fcix.net/archlinux/$repo/os/$arch",
                  "https://mnvoip.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://nnenix.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://nocix.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://ohioix.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://opencolo.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://ridgewireless.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://southfront.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://volico.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://ziply.mm.fcix.net/archlinux/$repo/os/$arch",
                  "https://america.mirror.pkgbuild.com/$repo/os/$arch",
                  "https://losangeles.mirror.pkgbuild.com/$repo/os/$arch",
                  "http://mirrors.vectair.net/archlinux/$repo/os/$arch",
                  "https://mirrors.vectair.net/archlinux/$repo/os/$arch",
                  "https://arch.mirror.k0.ae/$repo/os/$arch",
                  "https://mirror.zackmyers.io/archlinux/$repo/os/$arch",
                  "http://mirror.fossable.org/archlinux/$repo/os/$arch",
                  "https://m.lqy.me/arch/$repo/os/$arch",
                  "http://mirror.adectra.com/archlinux/$repo/os/$arch",
                  "https://mirror.adectra.com/archlinux/$repo/os/$arch",
                  "https://arch.goober.cloud/$repo/os/$arch",
                  "http://mirrors.bjg.at/arch/$repo/os/$arch",
                  "https://mirrors.bjg.at/arch/$repo/os/$arch",
                  "https://mirror.pilotfiber.com/archlinux/$repo/os/$arch",
                  "http://mirrors.iu13.net/archlinux/$repo/os/$arch",
                  "https://mirrors.iu13.net/archlinux/$repo/os/$arch",
                  "http://mirror.colonelhosting.com/archlinux/$repo/os/$arch",
                  "https://mirror.colonelhosting.com/archlinux/$repo/os/$arch",
                  "http://us.arch.niranjan.co/$repo/os/$arch",
                  "https://us.arch.niranjan.co/$repo/os/$arch",
                  "http://mirror.hasphetica.win/archlinux/$repo/os/$arch",
                  "https://mirror.hasphetica.win/archlinux/$repo/os/$arch",
                  "https://arch.mirror.marcusspencer.us:4443/archlinux/$repo/os/$arch",
                  "https://us-mnz.soulharsh007.dev/archlinux/$repo/os/$arch",
                  "http://arch.miningtcup.me/$repo/os/$arch",
                  "https://arch.miningtcup.me/$repo/os/$arch",
                  "http://mirrors.smeal.xyz/arch-linux/$repo/os/$arch",
                  "https://mirrors.smeal.xyz/arch-linux/$repo/os/$arch",
                  "https://arch-mirror.brightlight.today/$repo/os/$arch",
                  "https://yonderly.org/mirrors/archlinux/$repo/os/$arch",
                  "https://mirrors.lahansons.com/archlinux/$repo/os/$arch",
                  "https://mirror.givebytes.net/archlinux/$repo/os/$arch",
                  "https://mirrors.shr.cx/arch/$repo/os/$arch"
                ]
              },
              "optional_repositories": []
            },
            "network_config": {
              "type": "nm"
            },
            "ntp": true,
            "packages": ["base-devel", "curl", "firefox", "git", "nano", "plymouth", "gwenview", "xdg-utils", "xdg-user-dirs"],
            "parallel_downloads": 0,
            "profile_config": {
              "gfx_driver": "AMD / ATI (open-source)",
              "greeter": "sddm",
              "profile": {
                "custom_settings": {
                  "KDE Plasma": {}
                },
                "details": ["KDE Plasma"],
                "main": "Desktop"
              }
            },
            "services": [],
            "swap": true,
            "timezone": "UTC",
            "version": null
          }

          CONFIGEOF

          # Crear user_credentials.json
          cat > airootfs/etc/archinstall/user_credentials.json << "CREDSEOF"
          {
            "root_enc_password": null,
            "users": [
              {
                "enc_password": "$y$j9T$KhIE2mo2XuF5jlv8me5rB.$JN3y4/uH9fq32Cm/sIMgvD8REfgNUhWBNpwIJofd6X8",
                "groups": [],
                "sudo": true,
                "username": "playnix"
              }
            ]
          }

          CREDSEOF

          # Crear archivos de configuración post-instalación
          mkdir -p airootfs/etc/archinstall/post-install

          # Script para configurar iconos de escritorio después de la instalación
          cat > airootfs/etc/archinstall/post-install/desktop-setup.sh << "DESKTOPEOF"
          #!/bin/bash

          # Script de configuración post-instalación para iconos de escritorio
          USERNAME="playnix"
          USER_HOME="/home/$USERNAME"
          DESKTOP_DIR="$USER_HOME/Desktop"

          echo "Configurando iconos de escritorio para $USERNAME..."

          # Crear directorio Desktop si no existe
          mkdir -p "$DESKTOP_DIR"

          # Icono para Terminal/Konsole
          cat > "$DESKTOP_DIR/Terminal.desktop" << "TERMINALEOF"
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Terminal
          Name[es]=Terminal
          Comment=Terminal Emulator
          Comment[es]=Emulador de Terminal
          Exec=konsole
          Icon=utilities-terminal
          Terminal=false
          Categories=System;TerminalEmulator;
          Keywords=shell;prompt;command;commandline;cmd;
          TERMINALEOF

          # Icono para Administrador de Archivos
          cat > "$DESKTOP_DIR/File Manager.desktop" << "FILEEOF"
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=File Manager
          Name[es]=Administrador de Archivos
          Comment=File Manager
          Comment[es]=Administrador de Archivos
          Exec=dolphin
          Icon=system-file-manager
          Terminal=false
          Categories=System;FileManager;
          Keywords=folder;manager;explore;disk;filesystem;
          FILEEOF

          # Icono para Configuración del Sistema
          cat > "$DESKTOP_DIR/System Settings.desktop" << "SETTINGSEOF"
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=System Settings
          Name[es]=Configuración del Sistema
          Comment=Configure your system
          Comment[es]=Configura tu sistema
          Exec=systemsettings5
          Icon=preferences-system
          Terminal=false
          Categories=Settings;
          Keywords=configuration;settings;preferences;
          SETTINGSEOF

          # Icono para Firefox
          cat > "$DESKTOP_DIR/Firefox.desktop" << "FIREFOXEOF"
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Firefox
          Comment=Web Browser
          Comment[es]=Navegador Web
          Exec=firefox
          Icon=firefox
          Terminal=false
          Categories=Network;WebBrowser;
          Keywords=web;browser;internet;
          FIREFOXEOF

          # Establecer permisos y propietario correcto
          chown -R $USERNAME:$USERNAME "$DESKTOP_DIR"
          chmod +x "$DESKTOP_DIR"/*.desktop

          # Hacer que los archivos .desktop sean ejecutables y confiables
          sudo -u $USERNAME qdbus org.kde.klauncher5 /KLauncher reparseConfiguration 2>/dev/null || true

          # Configurar KDE para que confíe en los archivos .desktop del escritorio
          sudo -u $USERNAME mkdir -p "$USER_HOME/.config"
          sudo -u $USERNAME touch "$USER_HOME/.config/kdedefaults"

          echo "Iconos de escritorio configurados correctamente"
          DESKTOPEOF

          chmod +x airootfs/etc/archinstall/post-install/desktop-setup.sh

          # Crear script de post-instalación principal
          cat > airootfs/etc/archinstall/post-install/main.sh << "POSTEOF"
          #!/bin/bash

          # Script principal de post-instalación
          echo "Ejecutando configuración post-instalación..."

          # Configurar iconos de escritorio
          /etc/archinstall/post-install/desktop-setup.sh

          # Configurar autologin en SDDM (opcional)
          cat > /etc/sddm.conf.d/autologin.conf << EOF
          [Autologin]
          User=playnix
          Session=plasma
          [Theme]
          Current=breeze
          EOF

          # Habilitar servicios necesarios
          systemctl enable NetworkManager
          systemctl enable sddm

          # Configurar bashrc con alias útiles
          USER_HOME="/home/playnix"
          cat >> "\$USER_HOME/.bashrc" << 'BASHEOF'

          # Aliases útiles
          alias ll='ls -alF'
          alias la='ls -A'
          alias l='ls -CF'
          alias ..='cd ..'
          alias ...='cd ../..'
          alias grep='grep --color=auto'
          alias fgrep='fgrep --color=auto'
          alias egrep='egrep --color=auto'

          # Mensaje de bienvenida
          echo "¡Bienvenido a tu nuevo sistema Arch Linux con KDE!"
          echo "Usuario: playnix"
          echo ""
          BASHEOF

          chown playnix:playnix "\$USER_HOME/.bashrc"

          chown playnix:playnix "$USER_HOME/.bashrc"

          echo "Configuración post-instalación completada"
          POSTEOF

          chmod +x airootfs/etc/archinstall/post-install/main.sh

          # Crear script wrapper para detección automática de disco
          cat > airootfs/usr/local/bin/arch-installer << "INSTALLEREOF"
          #!/bin/bash

          # PlayNix Arch Linux Installer - Usando archinstall oficial
          echo "Iniciando instalación de Arch Linux..."
          echo "Esto copiará los archivos de configuración post-instalación..."

          # Ejecutar archinstall con configuración
          sudo archinstall --config /etc/archinstall/user_configuration.json --creds /etc/archinstall/user_credentials.json --silent

          # Verificar si la instalación fue exitosa
          if [ $? -eq 0 ]; then
              echo "Instalación base completada. Configurando sistema..."

              # Copiar scripts de post-instalación al sistema instalado
              if [ -d "/mnt" ] && [ "$(ls -A /mnt 2>/dev/null)" ]; then
                  echo "Copiando configuración post-instalación..."
                  cp -r /etc/archinstall/post-install /mnt/etc/archinstall/ 2>/dev/null || true

                  # Ejecutar configuración post-instalación en chroot
                  echo "Ejecutando configuración post-instalación..."
                  arch-chroot /mnt /etc/archinstall/post-install/main.sh 2>/dev/null || {
                      echo "Advertencia: No se pudo ejecutar la configuración post-instalación automáticamente"
                      echo "Puedes ejecutarla manualmente después del reinicio con:"
                      echo "sudo /etc/archinstall/post-install/main.sh"
                  }
              fi

              echo "¡Instalación completada! Puedes reiniciar el sistema."
          else
              echo "Error durante la instalación. Por favor, revisa los logs."
          fi

          INSTALLEREOF

          chmod +x airootfs/usr/local/bin/arch-installer
          '

      - name: Configure desktop entries
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/root/Desktop

          cat > airootfs/etc/skel/Desktop/arch-installer.desktop << "DESKTOP_EOF"
          [Desktop Entry]
          Name=Instalador de Arch Linux
          Comment=Instala Arch Linux en tu computadora
          Exec=konsole --hold -e sudo arch-installer
          Icon=system-software-install
          Terminal=false
          Type=Application
          Categories=System;
          DESKTOP_EOF

          cat > airootfs/etc/skel/Desktop/gparted.desktop << "GPARTED_EOF"
          [Desktop Entry]
          Name=GParted
          Comment=Editor de particiones
          Exec=sudo gparted
          Icon=gparted
          Terminal=false
          Type=Application
          Categories=System;
          GPARTED_EOF

          chmod +x airootfs/etc/skel/Desktop/*.desktop
          cp airootfs/etc/skel/Desktop/*.desktop airootfs/root/Desktop/
          chmod +x airootfs/root/Desktop/*.desktop
          '

      - name: Create pacman.conf
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          cat > pacman.conf << "PACMANEOF"
          [options]
          HoldPkg = pacman glibc
          Architecture = x86_64
          Color
          CheckSpace
          ParallelDownloads = 10
          SigLevel = Required DatabaseOptional
          LocalFileSigLevel = Optional

          [core]
          Include = /etc/pacman.d/mirrorlist

          [extra]
          Include = /etc/pacman.d/mirrorlist

          [multilib]
          Include = /etc/pacman.d/mirrorlist
          PACMANEOF
          '

      - name: Create loading screen service
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/usr/local/bin

          # Crear script de loading screen
          cat > airootfs/usr/local/bin/livecd-loading << "LOADINGEOF"
          #!/bin/bash

          # Script de pantalla de carga para el LiveCD
          clear
          echo -e "\033[1;34m"
          echo "     █████╗ ██████╗  ██████╗██╗  ██╗    ██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗"
          echo "    ██╔══██╗██╔══██╗██╔════╝██║  ██║    ██║     ██║████╗  ██║██║   ██║╚██╗██╔╝"
          echo "    ███████║██████╔╝██║     ███████║    ██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝ "
          echo "    ██╔══██║██╔══██╗██║     ██╔══██║    ██║     ██║██║╚██╗██║██║   ██║ ██╔██╗ "
          echo "    ██║  ██║██║  ██║╚██████╗██║  ██║    ███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗"
          echo "    ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝    ╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝"
          echo -e "\033[1;36m"
          echo "                              ██╗  ██╗██████╗ ███████╗"
          echo "                              ██║ ██╔╝██╔══██╗██╔════╝"
          echo "                              █████╔╝ ██║  ██║█████╗  "
          echo "                              ██╔═██╗ ██║  ██║██╔══╝  "
          echo "                              ██║  ██╗██████╔╝███████╗"
          echo "                              ╚═╝  ╚═╝╚═════╝ ╚══════╝"
          echo -e "\033[0m"
          echo ""
          echo -e "\033[1;32m               🐧 Arch Linux KDE Live CD - Cargando sistema...\033[0m"
          echo ""
          echo -e "\033[1;33m               Por favor, espera mientras se cargan los componentes del sistema\033[0m"
          echo ""

          # Animación de carga
          for i in {1..100}; do
            printf "\r\033[1;34m[%-50s] %d%%\033[0m" "$(printf "%*s" $((i/2)) "" | tr " " "█")" "$i"
            sleep 0.05
            if [ $i -eq 20 ]; then
              echo -e "\n\033[0;36m   » Cargando kernel y módulos...\033[0m"
            elif [ $i -eq 40 ]; then
              echo -e "\n\033[0;36m   » Detectando hardware...\033[0m"
            elif [ $i -eq 60 ]; then
              echo -e "\n\033[0;36m   » Configurando red...\033[0m"
            elif [ $i -eq 80 ]; then
              echo -e "\n\033[0;36m   » Iniciando entorno gráfico...\033[0m"
            fi
          done

          echo -e "\n\n\033[1;32m   ✓ Sistema cargado completamente\033[0m"
          echo -e "\033[1;37m   Usuario: liveuser (sin contraseña)\033[0m"
          echo -e "\033[1;37m   Para instalar: Ejecuta el instalador desde el escritorio\033[0m"
          echo ""
          sleep 2
          LOADINGEOF

          chmod +x airootfs/usr/local/bin/livecd-loading

          # Crear servicio para mostrar loading al inicio
          cat > airootfs/etc/systemd/system/livecd-loading.service << "SERVICEEOF"
          [Unit]
          Description=LiveCD Loading Screen
          After=getty.target
          Before=sddm.service

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/livecd-loading
          StandardOutput=tty
          TTYPath=/dev/tty1
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target
          SERVICEEOF
          '

      - name: Configure system customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/.config
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/etc/sddm.conf.d

          cat > airootfs/root/customize_airootfs.sh << "CUSTOMEOF"
          #!/usr/bin/env bash
          set -e -u

          echo "Iniciando customización..."

          # Locale
          sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
          sed -i "s/#es_ES.UTF-8/es_ES.UTF-8/" /etc/locale.gen
          locale-gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          echo "KEYMAP=es" > /etc/vconsole.conf

          # Timezone
          ln -sf /usr/share/zoneinfo/UTC /etc/localtime

          # Usuario
          useradd -m -G wheel,audio,video,storage,network -s /bin/bash liveuser
          passwd -d liveuser
          passwd -d root
          echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Servicios
          systemctl enable NetworkManager.service
          systemctl enable sddm.service
          systemctl enable livecd-loading.service

          # SDDM autologin
          cat > /etc/sddm.conf.d/autologin.conf << EOF
          [Autologin]
          User=liveuser
          Session=plasma
          [Theme]
          Current=breeze
          EOF

          # Hostname
          echo "archiso-kde" > /etc/hostname

          # Bashrc con información de bienvenida
          cat >> /home/liveuser/.bashrc << EOF
          alias ll="ls -la"
          clear
          echo -e "\033[1;34m=== 🐧 Arch Linux KDE Live CD ===\033[0m"
          echo -e "\033[1;32mBienvenido al sistema Live de Arch Linux con KDE\033[0m"
          echo -e "\033[0;36mUsuario actual: liveuser (sin contraseña)\033[0m"
          echo -e "\033[0;36mPara instalar: Ejecuta el instalador desde el escritorio\033[0m"
          echo ""
          EOF

          chown -R liveuser:liveuser /home/liveuser

          # Configurar Plymouth para splash screen
          if command -v plymouth-set-default-theme &> /dev/null; then
            plymouth-set-default-theme bgrt
          fi

          # Limpiar cache de pacman
          pacman -Scc --noconfirm
          CUSTOMEOF

          chmod +x airootfs/root/customize_airootfs.sh
          '

      - name: Configure boot with loading screen
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # GRUB con splash screen y parámetros de loading
          mkdir -p grub
          cat > grub/grub.cfg << "GRUBEOF"
          set default="0"
          set timeout=5

          menuentry "Arch Linux KDE Live" {
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% loglevel=3 udev.log_priority=3 vga=current console=tty1 plymouth.enable=1 splash
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }

          menuentry "Arch Linux KDE Live (modo verbose)" {
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% systemd.show_status=1
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }

          menuentry "Arch Linux KDE Live (modo texto)" {
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% systemd.unit=multi-user.target
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }
          GRUBEOF

          # Syslinux con parámetros de loading mejorados
          cat > syslinux/archiso_sys-linux.cfg << "SYSEOF"
          LABEL arch64
          MENU LABEL Arch Linux KDE Live
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% loglevel=3 udev.log_priority=3 vga=current console=tty1 plymouth.enable=1 splash

          LABEL arch64_verbose
          MENU LABEL Arch Linux KDE Live (modo verbose)
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% systemd.show_status=1

          LABEL arch64_text
          MENU LABEL Arch Linux KDE Live (modo texto)
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% systemd.unit=multi-user.target
          SYSEOF

          # SystemD-boot con opciones de carga mejoradas
          mkdir -p efiboot/loader/entries
          cat > efiboot/loader/loader.conf << "LOADEREOF"
          default archiso-x86_64-linux.conf
          timeout 5
          console-mode max
          editor no
          LOADEREOF

          cat > efiboot/loader/entries/archiso-x86_64-linux.conf << "ENTRYEOF"
          title Arch Linux KDE Live
          linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          options archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% loglevel=3 udev.log_priority=3 vga=current console=tty1 plymouth.enable=1 splash
          ENTRYEOF

          cat > efiboot/loader/entries/archiso-x86_64-linux-verbose.conf << "VERBOSEEOF"
          title Arch Linux KDE Live (modo verbose)
          linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          options archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% systemd.show_status=1
          VERBOSEEOF

          cat > efiboot/loader/entries/archiso-x86_64-linux-text.conf << "TEXTEOF"
          title Arch Linux KDE Live (modo texto)
          linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          options archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% systemd.unit=multi-user.target
          TEXTEOF

          # Profile actualizado con información del splash
          cat > profiledef.sh << "PROFILEEOF"
          #!/usr/bin/env bash
          iso_name="archlinux-kde"
          iso_label="ARCH_KDE_$(date +%Y%m)"
          iso_publisher="Arch Linux KDE Live"
          iso_application="Arch Linux KDE Live CD"
          iso_version="$(date +%Y.%m.%d)"
          install_dir="arch"
          buildmodes=("iso")
          bootmodes=("bios.syslinux.mbr" "bios.syslinux.eltorito" "uefi-x64.systemd-boot.esp" "uefi-x64.systemd-boot.eltorito")
          arch="x86_64"
          pacman_conf="pacman.conf"
          airootfs_image_type="squashfs"
          airootfs_image_tool_options=("-comp" "xz" "-b" "1M")
          file_permissions=(
            ["/root"]="0:0:750"
            ["/root/customize_airootfs.sh"]="0:0:755"
            ["/usr/local/bin/arch-installer"]="0:0:755"
            ["/usr/local/bin/livecd-loading"]="0:0:755"
          )
          PROFILEEOF
          '

      - name: Configure mkinitcpio for Plymouth
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc

          # Configurar mkinitcpio para incluir Plymouth
          cat > airootfs/etc/mkinitcpio.conf << "MKINITEOF"
          MODULES=()
          BINARIES=()
          FILES=()
          HOOKS=(base udev plymouth archiso_shutdown archiso archiso_loop_mnt archiso_pxe_common archiso_pxe_nbd archiso_pxe_http archiso_pxe_nfs archiso_kms modconf block plymouth-encrypt filesystems keyboard)
          COMPRESSION="xz"
          COMPRESSION_OPTIONS=()
          MODULES_DECOMPRESS="yes"
          MKINITEOF

          # Configurar Plymouth
          mkdir -p airootfs/etc/plymouth
          cat > airootfs/etc/plymouth/plymouthd.conf << "PLYMOUTHEOF"
          [Daemon]
          Theme=bgrt
          ShowDelay=0
          DeviceTimeout=5
          PLYMOUTHEOF
          '

      - name: Add boot message customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/systemd/system/getty@tty1.service.d

          # Personalizar getty para mostrar mensaje de bienvenida
          cat > airootfs/etc/systemd/system/getty@tty1.service.d/override.conf << "GETTYEOF"
          [Service]
          ExecStart=
          ExecStart=-/usr/bin/agetty -o "-p -f -- \\u" --noclear --autologin liveuser %I $TERM
          GETTYEOF

          # Crear mensaje de issue para mostrar en consola
          cat > airootfs/etc/issue << "ISSUEEOF"

          \e[1;34m     █████╗ ██████╗  ██████╗██╗  ██╗    ██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗\e[0m
          \e[1;34m    ██╔══██╗██╔══██╗██╔════╝██║  ██║    ██║     ██║████╗  ██║██║   ██║╚██╗██╔╝\e[0m
          \e[1;34m    ███████║██████╔╝██║     ███████║    ██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝ \e[0m
          \e[1;34m    ██╔══██║██╔══██╗██║     ██╔══██║    ██║     ██║██║╚██╗██║██║   ██║ ██╔██╗ \e[0m
          \e[1;34m    ██║  ██║██║  ██║╚██████╗██║  ██║    ███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗\e[0m
          \e[1;34m    ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝    ╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝\e[0m
          \e[1;36m                              ██╗  ██╗██████╗ ███████╗\e[0m
          \e[1;36m                              ██║ ██╔╝██╔══██╗██╔════╝\e[0m
          \e[1;36m                              █████╔╝ ██║  ██║█████╗  \e[0m
          \e[1;36m                              ██╔═██╗ ██║  ██║██╔══╝  \e[0m
          \e[1;36m                              ██║  ██╗██████╔╝███████╗\e[0m
          \e[1;36m                              ╚═╝  ╚═╝╚═════╝ ╚══════╝\e[0m

          \e[1;32m               🐧 Arch Linux KDE Live CD\e[0m
          \e[0;36m               Sistema cargado y listo para usar\e[0m

          \e[1;37m    Usuario: liveuser (sin contraseña)\e[0m
          \e[1;37m    Para instalar: Ejecuta el instalador desde el escritorio\e[0m

          ISSUEEOF
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          echo "=== Archivos del proyecto ==="
          ls -la
          echo "=== Construyendo ISO con pantalla de carga ==="
          mkarchiso -v -w work -o out .
          ls -la out/
          '
          mkdir -p iso-output
          docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/
          ls -lh ./iso-output/

      - name: Cleanup
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # 🐧 Arch Linux KDE Live CD

            ## Características
            - ✨ Pantalla de carga personalizada con animación
            - 🖥️ Entorno KDE Plasma completo
            - 📦 Instalador automático preconfigurado
            - 🎨 Interfaz gráfica de bienvenida
            - 🔧 Herramientas de particionado incluidas

            ## Opciones de arranque
            - **Modo normal**: Con splash screen y carga silenciosa
            - **Modo verbose**: Muestra todos los mensajes del sistema
            - **Modo texto**: Arranque directo a consola

            Usuario por defecto: `liveuser` (sin contraseña)
          files: iso-output/*.iso
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
