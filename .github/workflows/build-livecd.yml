name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          docker exec arch-builder pacman -Syu --noconfirm
          docker exec arch-builder pacman -S --noconfirm archiso git base-devel

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* .

          # Crear lista de paquetes personalizada
          cat > packages.x86_64 << "PKGEOF"
          # Base system
          base
          base-devel
          linux
          linux-firmware
          mkinitcpio
          mkinitcpio-archiso
          mkinitcpio-nfs-utils

          # Boot
          syslinux
          efibootmgr
          grub
          os-prober

          # Filesystem tools
          dosfstools
          e2fsprogs
          ntfs-3g
          exfatprogs
          btrfs-progs
          xfsprogs
          f2fs-tools
          jfsutils

          # Network
          networkmanager
          network-manager-applet
          dhcpcd
          wpa_supplicant
          wireless_tools
          iwd
          inetutils
          dnsutils
          nftables
          iptables-nft

          # Hardware support
          mesa
          xf86-video-intel
          xf86-video-amdgpu
          xf86-video-nouveau
          xf86-video-ati
          xf86-video-vesa
          xf86-input-libinput

          # Audio
          pipewire
          pipewire-alsa
          pipewire-pulse
          pipewire-jack
          wireplumber

          # KDE Plasma (minimal)
          plasma-desktop
          plasma-nm
          plasma-pa
          powerdevil
          sddm
          sddm-kcm
          breeze
          breeze-gtk
          kde-gtk-config
          kscreen
          kinfocenter

          # Additional KDE apps
          konsole
          dolphin
          kate
          ark
          spectacle
          okular
          gwenview

          # System tools
          firefox
          htop
          fastfetch
          git
          vim
          nano
          wget
          curl
          rsync

          # Installer
          calamares
          calamares-qt5
          boost-libs
          kpmcore
          yaml-cpp
          parted
          squashfs-tools

          # Fonts
          ttf-dejavu
          ttf-liberation
          noto-fonts
          noto-fonts-emoji

          # Archive tools
          zip
          unzip
          p7zip
          unrar

          # Live system tools
          arch-install-scripts
          gparted
          testdisk
          ddrescue

          # Additional utilities
          sudo
          which
          PKGEOF
          '

      - name: Create pacman.conf
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Crear pacman.conf personalizado
          cat > pacman.conf << "PACMANEOF"
          [options]
          HoldPkg     = pacman glibc
          Architecture = x86_64
          Color
          CheckSpace
          ParallelDownloads = 5
          SigLevel    = Required DatabaseOptional
          LocalFileSigLevel = Optional

          [core]
          Include = /etc/pacman.d/mirrorlist

          [extra]
          Include = /etc/pacman.d/mirrorlist

          [multilib]
          Include = /etc/pacman.d/mirrorlist
          PACMANEOF
          '

      - name: Configure system customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Crear estructura de directorios necesaria
          mkdir -p airootfs/etc/skel
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/etc/sddm.conf.d
          mkdir -p airootfs/root
          mkdir -p airootfs/etc/calamares
          mkdir -p airootfs/etc/calamares/modules
          mkdir -p airootfs/etc/calamares/branding/archlinux
          mkdir -p airootfs/usr/share/applications
          mkdir -p airootfs/usr/share/pixmaps

          # Crear configuración principal de Calamares
          cat > airootfs/etc/calamares/settings.conf << "CALAMARESCONF"
          ---
          modules-search: [ local ]

          instances:
          - id:       before
            module:   shellprocess
            config:   shellprocess-before.conf
          - id:       after
            module:   shellprocess
            config:   shellprocess-after.conf

          sequence:
          - show:
            - welcome
            - locale
            - keyboard
            - partition
            - users
            - summary
          - exec:
            - partition
            - mount
            - unpackfs
            - machineid
            - fstab
            - locale
            - keyboard
            - localecfg
            - initcpioconf
            - initcpio
            - users
            - displaymanager
            - networkcfg
            - hwclock
            - services-systemd
            - shellprocess@before
            - packages
            - removeuser
            - shellprocess@after
            - umount
          - show:
            - finished

          branding: archlinux

          prompt-install: true

          dont-chroot: false

          disable-cancel: false

          disable-cancel-during-exec: false

          hide-back-and-next-during-exec: false

          quit-at-end: false
          CALAMARESCONF

          # Configurar módulos de Calamares
          cat > airootfs/etc/calamares/modules/welcome.conf << "WELCOMECONF"
          ---
          showSupportUrl:         true
          showKnownIssuesUrl:     true
          showReleaseNotesUrl:    false

          requirements:
              requiredStorage:    10.0
              requiredRam:        1.0
              internetCheckUrl:   http://google.com
              check:
                  - storage
                  - ram
                  - power
                  - internet
                  - root
              required:
                  - storage
                  - ram
                  - root
          WELCOMECONF

          cat > airootfs/etc/calamares/modules/partition.conf << "PARTITIONCONF"
          ---
          efiSystemPartition:     "/boot/efi"
          efiSystemPartitionSize:     512M
          efiSystemPartitionName:     EFI
          userSwapChoices:
              - none
              - small
              - suspend
              - file
          drawNestedPartitions:   false
          alwaysShowPartitionLabels: true
          initialPartitioningChoice: alongside
          initialSwapChoice: none
          defaultFileSystemType:  "ext4"
          availableFileSystemTypes:  ["ext4", "btrfs", "xfs", "f2fs"]
          PARTITIONCONF

          cat > airootfs/etc/calamares/modules/users.conf << "USERSCONF"
          ---
          defaultGroups:
              - name: users
                must_exist: true
                system: true
              - lp
              - video
              - network
              - storage
              - wheel
              - audio
          autologinGroup:  autologin
          doAutologin:     false
          sudoersGroup:    wheel
          setRootPassword: true
          doReusePassword: false
          passwordRequirements:
              nonempty: true
              minLength: 1
          userShell: /bin/bash
          USERSCONF

          cat > airootfs/etc/calamares/modules/displaymanager.conf << "DISPLAYCONF"
          ---
          displaymanagers:
            - sddm

          defaultDesktopEnvironment:
              executable: "startplasma-x11"
              desktopFile: "plasma"

          basicSetup: true
          sysconfigSetup: true
          DISPLAYCONF

          cat > airootfs/etc/calamares/modules/packages.conf << "PACKAGESCONF"
          ---
          backend: pacman

          update_db: true
          update_system: false

          operations:
            - install:
              - base-devel
              - linux-headers
              - networkmanager
              - firefox
              - konsole
              - dolphin
              - kate
            - remove:
              - calamares
              - calamares-qt5
              - boost-libs
              - yaml-cpp
              - kpmcore
              - mkinitcpio-archiso
          PACKAGESCONF

          cat > airootfs/etc/calamares/modules/unpackfs.conf << "UNPACKFSCONF"
          ---
          unpack:
              - source: "/run/archiso/bootmnt/arch/x86_64/airootfs.sfs"
                sourcefs: "squashfs"
                destination: ""
          UNPACKFSCONF

          cat > airootfs/etc/calamares/modules/finished.conf << "FINISHEDCONF"
          ---
          restartNowEnabled: true
          restartNowChecked: false
          restartNowCommand: "systemctl -i reboot"
          FINISHEDCONF

          # Configurar shellprocess
          cat > airootfs/etc/calamares/modules/shellprocess-before.conf << '\''SHELLBEFORE'\''
---
dontChroot: false
timeout: 999
script:
    - command: "pacman-key --init"
    - command: "pacman-key --populate archlinux"
SHELLBEFORE

          cat > airootfs/etc/calamares/modules/shellprocess-after.conf << '\''SHELLAFTER'\''
---
dontChroot: false
timeout: 999
script:
    - command: "systemctl enable NetworkManager"
    - command: "systemctl enable sddm"
SHELLAFTER

          # Crear otros módulos necesarios
          cat > airootfs/etc/calamares/modules/machineid.conf << "MACHINEIDCONF"
          ---
          systemd: true
          dbus: true
          symlink: true
          MACHINEIDCONF

          cat > airootfs/etc/calamares/modules/locale.conf << "LOCALECONF"
          ---
          region:                  "Europe"
          zone:                    "Madrid"
          localeGenPath:           "/etc/locale.gen"
          geoip:
              style:    "json"
              url:      "https://geoip.kde.org/v1/calamares"
              selector: "timezone"
          LOCALECONF

          cat > airootfs/etc/calamares/modules/keyboard.conf << "KEYBOARDCONF"
          ---
          keyboardLayout: "es"
          keyboardVariant: ""
          KEYBOARDCONF

          cat > airootfs/etc/calamares/modules/services-systemd.conf << "SERVICESCONF"
          ---
          services:
            - name: "NetworkManager"
              mandatory: true
            - name: "sddm"
              mandatory: true
          SERVICESCONF

          cat > airootfs/etc/calamares/modules/removeuser.conf << "REMOVEUSERCONF"
          ---
          username: liveuser
          REMOVEUSERCONF

          cat > airootfs/etc/calamares/modules/initcpioconf.conf << "INITCPIOCONF"
          ---
          kernel: linux
          INITCPIOCONF

          cat > airootfs/etc/calamares/modules/fstab.conf << "FSTABCONF"
          ---
          mountOptions:
              default: defaults,noatime
              btrfs: defaults,noatime,compress=zstd
          ssdExtraMountOptions:
              ext4: discard
              btrfs: discard=async,ssd
          crypttabOptions: luks,keyscript=/bin/cat
          FSTABCONF

          cat > airootfs/etc/calamares/modules/mount.conf << "MOUNTCONF"
          ---
          extraMounts:
              - device: proc
                fs: proc
                mountPoint: /proc
              - device: sys
                fs: sysfs
                mountPoint: /sys
              - device: /dev
                mountPoint: /dev
                options: bind
              - device: tmpfs
                fs: tmpfs
                mountPoint: /run
              - device: /run/udev
                mountPoint: /run/udev
                options: bind
          MOUNTCONF

          cat > airootfs/etc/calamares/modules/localecfg.conf << "LOCALECFGCONF"
          ---
          writeLocaleConfig: true
          LOCALECFGCONF

          cat > airootfs/etc/calamares/modules/networkcfg.conf << "NETWORKCFGCONF"
          ---
          backend: nm
          NETWORKCFGCONF

          cat > airootfs/etc/calamares/modules/hwclock.conf << "HWCLOCKCONF"
          ---
          hwclock: UTC
          HWCLOCKCONF

          # Crear branding básico
          cat > airootfs/etc/calamares/branding/archlinux/branding.desc << "BRANDINGCONF"
          ---
          componentName:  archlinux

          welcomeStyleCalamares:   false

          strings:
              productName:         "Arch Linux"
              shortProductName:    "Arch"
              version:             "Rolling"
              shortVersion:        "Rolling"
              versionedName:       "Arch Linux"
              shortVersionedName:  "Arch"
              bootloaderEntryName: "Arch Linux"
              productUrl:          "https://archlinux.org/"
              supportUrl:          "https://wiki.archlinux.org/"
              knownIssuesUrl:      "https://bugs.archlinux.org/"
              releaseNotesUrl:     "https://archlinux.org/news/"
              donateUrl:           "https://archlinux.org/donate/"

          images:
              productLogo:         "archlinux-logo.png"
              productIcon:         "archlinux-icon.png"
              productWelcome:      "welcome.png"

          slideshow:               "show.qml"

          style:
             sidebarBackground:    "#2e3440"
             sidebarText:          "#FFFFFF"
             sidebarTextSelect:    "#4c566a"
             sidebarTextHighlight: "#5e81ac"
          BRANDINGCONF

          # Crear archivo .desktop para el instalador
          cat > airootfs/usr/share/applications/calamares.desktop << "DESKTOPFILE"
          [Desktop Entry]
          Type=Application
          Version=1.0
          Name=Install Arch Linux
          Name[es]=Instalar Arch Linux
          GenericName=System Installer
          GenericName[es]=Instalador del Sistema
          Comment=Install Arch Linux to your computer
          Comment[es]=Instala Arch Linux en tu computadora
          Icon=calamares
          Exec=sudo /usr/bin/calamares
          Terminal=false
          StartupNotify=true
          Categories=Qt;System;
          X-AppStream-Ignore=true
          DESKTOPFILE

          # Copiar el .desktop al escritorio del usuario
          cp airootfs/usr/share/applications/calamares.desktop airootfs/etc/skel/Desktop/
          chmod +x airootfs/etc/skel/Desktop/calamares.desktop

          # Crear un icono simple para Calamares
          cat > airootfs/usr/share/pixmaps/calamares.svg << '\''CALAMARESICON'\''
<?xml version="1.0" encoding="UTF-8"?>
<svg width="64" height="64" version="1.1" xmlns="http://www.w3.org/2000/svg">
  <rect width="64" height="64" rx="8" fill="#1793d1"/>
  <text x="32" y="40" text-anchor="middle" font-family="sans-serif" font-size="28" font-weight="bold" fill="white">A</text>
</svg>
CALAMARESICON

          # Script de customización principal
          cat > airootfs/root/customize_airootfs.sh << "CUSTOMEOF"
          #!/usr/bin/env bash

          set -e -u

          # Configurar locale
          echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
          echo "es_ES.UTF-8 UTF-8" >> /etc/locale.gen
          locale-gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf

          # Configurar teclado
          echo "KEYMAP=es" > /etc/vconsole.conf

          # Configurar timezone
          ln -sf /usr/share/zoneinfo/UTC /etc/localtime

          # Crear usuario liveuser
          useradd -m -G wheel,audio,video,storage,optical,network,power -s /bin/bash liveuser

          # Sin contraseña para liveuser
          passwd -d liveuser

          # Configurar sudo sin contraseña para wheel
          echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Habilitar servicios necesarios
          systemctl enable NetworkManager.service
          systemctl enable sddm.service

          # Crear servicio para configuración inicial
          cat > /etc/systemd/system/livecd-setup.service << SERVICEEOF
[Unit]
Description=LiveCD Setup Service
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/livecd-setup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
SERVICEEOF

          # Script de configuración inicial
          cat > /usr/local/bin/livecd-setup.sh << SETUPEOF
#!/bin/bash
# Asegurar que el icono del instalador sea visible y ejecutable
if [ -f /home/liveuser/Desktop/calamares.desktop ]; then
    chmod +x /home/liveuser/Desktop/calamares.desktop
    chown liveuser:liveuser /home/liveuser/Desktop/calamares.desktop
fi

# Configurar permisos para Calamares
if [ -f /usr/bin/calamares ]; then
    chmod +x /usr/bin/calamares
fi
SETUPEOF

          chmod +x /usr/local/bin/livecd-setup.sh
          systemctl enable livecd-setup.service

          # Configurar autologin en SDDM
          mkdir -p /etc/sddm.conf.d
          cat > /etc/sddm.conf.d/autologin.conf << SDDMEOF
[Autologin]
User=liveuser
Session=plasma

[Theme]
Current=breeze
SDDMEOF

          # Configurar hostname
          echo "archiso" > /etc/hostname

          # Configurar polkit para permitir a liveuser ejecutar calamares
          mkdir -p /etc/polkit-1/rules.d/
          cat > /etc/polkit-1/rules.d/49-nopasswd_calamares.rules << POLKITEOF
polkit.addRule(function(action, subject) {
    if (subject.user == "liveuser") {
        return polkit.Result.YES;
    }
});
POLKITEOF

          # Limpiar cachés
          pacman -Scc --noconfirm
          CUSTOMEOF

          chmod +x airootfs/root/customize_airootfs.sh
          '

      - name: Configure boot parameters
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Configurar grub
          mkdir -p grub
          cat > grub/grub.cfg << "GRUBEOF"
          insmod part_gpt
          insmod part_msdos
          insmod fat
          insmod iso9660

          insmod all_video
          insmod font

          set default="0"
          set timeout=5

          menuentry "Arch Linux KDE Live" {
              set gfxpayload=keep
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet splash
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }

          menuentry "Arch Linux KDE Live (nomodeset)" {
              set gfxpayload=keep
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% nomodeset
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }
          GRUBEOF

          # Configurar syslinux
          cat > syslinux/archiso_sys-linux.cfg << "SYSEOF"
          LABEL arch64
          TEXT HELP
          Boot the Arch Linux KDE Live environment.
          ENDTEXT
          MENU LABEL Arch Linux KDE Live
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet splash

          LABEL arch64_nomodeset
          TEXT HELP
          Boot the Arch Linux KDE Live environment with nomodeset.
          ENDTEXT
          MENU LABEL Arch Linux KDE Live (nomodeset)
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% nomodeset
          SYSEOF

          # Configurar timeout corto
          sed -i "s/TIMEOUT 300/TIMEOUT 30/" syslinux/archiso_head.cfg

          # Configurar systemd-boot
          mkdir -p efiboot/loader/entries
          cat > efiboot/loader/loader.conf << "LOADEREOF"
          default  archiso-x86_64-linux.conf
          timeout  3
          console-mode keep
          LOADEREOF

          cat > efiboot/loader/entries/archiso-x86_64-linux.conf << "ENTRYEOF"
          title   Arch Linux KDE Live
          linux   /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          initrd  /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          options archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet splash
          ENTRYEOF

          # Configurar profiledef.sh
          cat > profiledef.sh << "PROFILEEOF"
          #!/usr/bin/env bash

          iso_name="archlinux-kde"
          iso_label="ARCH_KDE_$(date +%Y%m)"
          iso_publisher="Arch Linux KDE Live"
          iso_application="Arch Linux KDE Live CD"
          iso_version="$(date +%Y.%m.%d)"
          install_dir="arch"
          buildmodes=("iso")
          bootmodes=("bios.syslinux.mbr" "bios.syslinux.eltorito" "uefi-x64.systemd-boot.esp" "uefi-x64.systemd-boot.eltorito")
          arch="x86_64"
          pacman_conf="pacman.conf"
          airootfs_image_type="squashfs"
          airootfs_image_tool_options=("-comp" "xz" "-Xbcj" "x86" "-b" "1M" "-Xdict-size" "1M")
          file_permissions=(
            ["/root"]="0:0:750"
            ["/root/customize_airootfs.sh"]="0:0:755"
            ["/usr/local/bin/livecd-setup.sh"]="0:0:755"
          )
          PROFILEEOF
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Verificar que todos los archivos necesarios existen
          echo "=== Verificando archivos ==="
          ls -la
          echo "=== Contenido de packages.x86_64 ==="
          head -20 packages.x86_64
          echo "=== Contenido de profiledef.sh ==="
          cat profiledef.sh

          # Crear el ISO
          mkarchiso -v -w work -o out .

          # Listar archivos generados
          ls -la out/
          '

          # Crear directorio de salida en el host
          mkdir -p iso-output

          # Copiar ISO al workspace del host
          docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/

      - name: Cleanup container
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Split ISO for release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd iso-output
          ISO_FILE=$(ls *.iso | head -1)

          # Si el archivo es mayor a 2GB, dividirlo
          FILE_SIZE=$(stat -c%s "$ISO_FILE")
          if [ $FILE_SIZE -gt 2147483648 ]; then
            echo "ISO size is $FILE_SIZE bytes, splitting into 1.9GB parts..."
            split -b 1900M "$ISO_FILE" "${ISO_FILE}.part"
            rm "$ISO_FILE"

            # Crear script para unir las partes
            cat > join-iso.sh << 'EOF'
#!/bin/bash
echo "Joining ISO parts..."
cat *.iso.part* > archlinux-kde.iso
echo "ISO reconstructed as archlinux-kde.iso"
echo "You can verify with: sha256sum archlinux-kde.iso"
EOF
            chmod +x join-iso.sh

            # Crear checksum
            sha256sum *.iso.part* > sha256sums.txt
          fi

          ls -la

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Obtener información del ISO
          cd iso-output
          ISO_FILE=$(ls *.iso | head -1)
          ISO_SIZE=$(du -h "$ISO_FILE" | cut -f1)
          ISO_SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)

          # Crear archivo de información
          cat > README.txt << EOF
          Arch Linux KDE Live CD v${{ github.run_number }}

          ISO: $ISO_FILE
          Size: $ISO_SIZE
          SHA256: $ISO_SHA256

          La ISO es demasiado grande para GitHub Releases.
          Por favor, descárguela desde los Artifacts de este workflow.
          EOF

      - name: Create Release (Info Only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # Arch Linux Live CD con KDE Plasma

            ## ⚠️ Descarga
            **La ISO es demasiado grande para GitHub Releases (>2GB).**

            Por favor, descárguela desde:
            - **GitHub Actions Artifacts**: Ve a la pestaña Actions → Selecciona este workflow → Descarga "arch-kde-livecd"
            - **Validez**: Los artifacts se mantienen por 30 días

            ## Características:
            - **Entorno de escritorio**: KDE Plasma
            - **Usuario**: `liveuser` (sin contraseña, login automático)
            - **Tamaño de ISO**: ~3.2 GB

            ## Información técnica:
            Ver README.txt para detalles de checksum y tamaño exacto.

          files: iso-output/README.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}