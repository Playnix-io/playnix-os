name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          docker exec arch-builder pacman -Syu --noconfirm
          docker exec arch-builder pacman -S --noconfirm archiso git base-devel wget

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* . '

      - name: Create archinstall configuration
        run: |


          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/usr/local/bin
          mkdir -p airootfs/etc/archinstall

          # Crear user_configuration.json (tu configuraci√≥n corregida)

          chmod +x airootfs/usr/local/bin/arch-installer
          '

      - name: Configure desktop entries
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/root/Desktop

          chmod +x airootfs/etc/skel/Desktop/*.desktop
          cp airootfs/etc/skel/Desktop/*.desktop airootfs/root/Desktop/
          chmod +x airootfs/root/Desktop/*.desktop
          '

      - name: Create pacman.conf
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde'

      - name: Create loading screen service
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/usr/local/bin

          # Crear script de loading screen
          chmod +x airootfs/usr/local/bin/livecd-loading
          '

      - name: Configure system customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/.config
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/etc/sddm.conf.d

          chmod +x airootfs/root/customize_airootfs.sh
          '

      - name: Configure boot with loading screen
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde'

      - name: Configure mkinitcpio for Plymouth
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc
          '

      - name: Add boot message customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/systemd/system/getty@tty1.service.d

          # Personalizar getty para mostrar mensaje de bienvenida
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          echo "=== Archivos del proyecto ==="
          ls -la
          echo "=== Construyendo ISO con pantalla de carga ==="
          mkarchiso -v -w work -o out .
          ls -la out/
          '
          mkdir -p iso-output
          docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/
          ls -lh ./iso-output/

      - name: Cleanup
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # üêß Arch Linux KDE Live CD
          files: iso-output/*.iso
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
