name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          docker exec arch-builder pacman -Syu --noconfirm
          docker exec arch-builder pacman -S --noconfirm archiso git base-devel wget

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* .

          # Crear lista de paquetes personalizada
          cat > packages.x86_64 << "PKGEOF"
          # Base system
          base
          base-devel
          linux
          linux-firmware
          mkinitcpio
          mkinitcpio-archiso
          mkinitcpio-nfs-utils
          archiso
          nbd

          # Boot
          syslinux
          efibootmgr
          grub
          os-prober

          # Filesystem tools
          dosfstools
          e2fsprogs
          ntfs-3g
          exfatprogs
          btrfs-progs
          xfsprogs
          f2fs-tools
          jfsutils

          # Network
          networkmanager
          network-manager-applet
          dhcpcd
          wpa_supplicant
          wireless_tools
          iwd
          inetutils
          dnsutils
          nftables
          iptables-nft
          reflector

          # Hardware support
          mesa
          xf86-video-amdgpu
          xf86-video-ati
          xf86-input-libinput
          vulkan-radeon

          # Audio
          pipewire
          pipewire-alsa
          pipewire-pulse
          pipewire-jack
          wireplumber
          pavucontrol

          # KDE Plasma (completo pero optimizado)
          plasma-desktop
          plasma-nm
          plasma-pa
          powerdevil
          sddm
          sddm-kcm
          breeze
          breeze-gtk
          kde-gtk-config
          kscreen
          kinfocenter
          systemsettings

          # Aplicaciones KDE esenciales
          konsole
          dolphin
          ark
          okular
          gwenview

          # Navegador y multimedia
          firefox

          # System tools
          htop
          fastfetch
          git
          vim
          nano
          wget
          curl
          rsync
          tree
          lsof
          which
          sudo

          # Fonts
          ttf-dejavu
          ttf-liberation
          noto-fonts
          noto-fonts-emoji
          terminus-font

          # Archive tools
          zip
          unzip
          p7zip
          unrar

          # Live system and installation tools
          arch-install-scripts
          archinstall
          gparted
          parted
          dialog

          # Development tools (optional)
          python
          python-pip

          # Additional utilities
          man-db
          man-pages
          PKGEOF
          '

      - name: Create archinstall configuration
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/usr/local/bin
          mkdir -p airootfs/etc/archinstall

          # Crear user_configuration.json (tu configuración corregida)
          cat > airootfs/etc/archinstall/user_configuration.json << "CONFIGEOF"
          {
            "archinstall-language": "English",
            "audio_config": {
              "audio": "pipewire"
            },
            "bootloader": "Grub",
            "custom_commands": [],
            "disk_config": {
              "btrfs_options": {
                "snapshot_config": null
              },
              "config_type": "default_layout",
              "device_modifications": [
                {
                  "device": "/dev/nvme0n1",
                  "partitions": [
                    {
                      "btrfs": [],
                      "dev_path": null,
                      "flags": ["boot", "esp"],
                      "fs_type": "fat32",
                      "mount_options": [],
                      "mountpoint": "/boot",
                      "obj_id": "9302cd00-7e28-4c67-a0a7-3526ead7174a",
                      "size": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "MiB",
                        "value": 512
                      },
                      "start": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "MiB",
                        "value": 1
                      },
                      "status": "create",
                      "type": "primary"
                    },
                    {
                      "btrfs": [],
                      "dev_path": null,
                      "flags": [],
                      "fs_type": "swap",
                      "mount_options": [],
                      "mountpoint": null,
                      "obj_id": "swap-partition-id",
                      "size": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "GiB",
                        "value": 4
                      },
                      "start": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "MiB",
                        "value": 513
                      },
                      "status": "create",
                      "type": "primary"
                    },
                    {
                      "btrfs": [],
                      "dev_path": null,
                      "flags": [],
                      "fs_type": "ext4",
                      "mount_options": [],
                      "mountpoint": "/",
                      "obj_id": "b1b0fecf-9863-41c8-ad98-54e0cd26abc0",
                      "size": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "%",
                        "value": "100%FREE"
                      },
                      "start": {
                        "sector_size": {
                          "unit": "B",
                          "value": 512
                        },
                        "unit": "GiB",
                        "value": 4.5
                      },
                      "status": "create",
                      "type": "primary"
                    }
                  ],
                  "wipe": true
                }
              ]
            },
            "hostname": "playnix",
            "kernels": ["linux"],
            "locale_config": {
              "kb_layout": "us",
              "sys_enc": "UTF-8",
              "sys_lang": "en_US.UTF-8"
            },
            "mirror_config": {
              "custom_repositories": [],
              "custom_servers": [],
              "mirror_regions": {
                "Spain": [
                  "https://ftp.rediris.es/mirror/archlinux/$repo/os/$arch",
                  "https://mirror.raiolanetworks.com/archlinux/$repo/os/$arch"
                ]
              },
              "optional_repositories": []
            },
            "network_config": {
              "type": "nm"
            },
            "ntp": true,
            "packages": ["base-devel", "curl", "firefox", "git", "nano", "plymouth", "gwenview"],
            "parallel_downloads": 0,
            "profile_config": {
              "gfx_driver": "All open-source",
              "greeter": "sddm",
              "profile": {
                "custom_settings": {
                  "KDE Plasma": {}
                },
                "details": ["KDE Plasma"],
                "main": "Desktop"
              }
            },
            "services": [],
            "swap": true,
            "timezone": "UTC",
            "version": null
          }
          CONFIGEOF

          # Crear user_credentials.json
          cat > airootfs/etc/archinstall/user_credentials.json << "CREDSEOF"
          {
            "root_enc_password": null,
            "users": [
              {
                "enc_password": "$y$j9T$KhIE2mo2XuF5jlv8me5rB.$JN3y4/uH9fq32Cm/sIMgvD8REfgNUhWBNpwIJofd6X8",
                "groups": [],
                "sudo": true,
                "username": "playnix"
              }
            ]
          }

          CREDSEOF

          # Crear script wrapper para detección automática de disco
          cat > airootfs/usr/local/bin/arch-installer << "INSTALLEREOF"
          #!/bin/bash

          # PlayNix Arch Linux Installer - Usando archinstall oficial
          sudo archinstall --config /etc/archinstall/user_configuration.json --creds /etc/archinstall/user_credentials.json --silent

          INSTALLEREOF

          chmod +x airootfs/usr/local/bin/arch-installer
          '

      - name: Configure desktop entries
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/root/Desktop

          cat > airootfs/etc/skel/Desktop/arch-installer.desktop << "DESKTOP_EOF"
          [Desktop Entry]
          Name=Instalador de Arch Linux
          Comment=Instala Arch Linux en tu computadora
          Exec=konsole --hold -e sudo arch-installer
          Icon=system-software-install
          Terminal=false
          Type=Application
          Categories=System;
          DESKTOP_EOF

          cat > airootfs/etc/skel/Desktop/gparted.desktop << "GPARTED_EOF"
          [Desktop Entry]
          Name=GParted
          Comment=Editor de particiones
          Exec=sudo gparted
          Icon=gparted
          Terminal=false
          Type=Application
          Categories=System;
          GPARTED_EOF

          chmod +x airootfs/etc/skel/Desktop/*.desktop
          cp airootfs/etc/skel/Desktop/*.desktop airootfs/root/Desktop/
          chmod +x airootfs/root/Desktop/*.desktop
          '

      - name: Create pacman.conf
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          cat > pacman.conf << "PACMANEOF"
          [options]
          HoldPkg = pacman glibc
          Architecture = x86_64
          Color
          CheckSpace
          ParallelDownloads = 10
          SigLevel = Required DatabaseOptional
          LocalFileSigLevel = Optional

          [core]
          Include = /etc/pacman.d/mirrorlist

          [extra]
          Include = /etc/pacman.d/mirrorlist

          [multilib]
          Include = /etc/pacman.d/mirrorlist
          PACMANEOF
          '

      - name: Configure system customization
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          mkdir -p airootfs/etc/skel/.config
          mkdir -p airootfs/etc/systemd/system
          mkdir -p airootfs/etc/sddm.conf.d

          cat > airootfs/root/customize_airootfs.sh << "CUSTOMEOF"
          #!/usr/bin/env bash
          set -e -u

          echo "Iniciando customización..."

          # Locale
          sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
          sed -i "s/#es_ES.UTF-8/es_ES.UTF-8/" /etc/locale.gen
          locale-gen
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          echo "KEYMAP=es" > /etc/vconsole.conf

          # Timezone
          ln -sf /usr/share/zoneinfo/UTC /etc/localtime

          # Usuario
          useradd -m -G wheel,audio,video,storage,network -s /bin/bash liveuser
          passwd -d liveuser
          passwd -d root
          echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Servicios
          systemctl enable NetworkManager.service
          systemctl enable sddm.service

          # SDDM autologin
          cat > /etc/sddm.conf.d/autologin.conf << EOF
          [Autologin]
          User=liveuser
          Session=plasma
          [Theme]
          Current=breeze
          EOF

          # Hostname
          echo "archiso-kde" > /etc/hostname

          # Bashrc
          cat >> /home/liveuser/.bashrc << EOF
          alias ll="ls -la"
          echo "=== Arch Linux KDE Live ==="
          echo "Usuario: liveuser (sin contraseña)"
          EOF

          chown -R liveuser:liveuser /home/liveuser
          pacman -Scc --noconfirm
          CUSTOMEOF

          chmod +x airootfs/root/customize_airootfs.sh
          '

      - name: Configure boot
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # GRUB
          mkdir -p grub
          cat > grub/grub.cfg << "GRUBEOF"
          set default="0"
          set timeout=5

          menuentry "Arch Linux KDE Live" {
              linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet
              initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          }
          GRUBEOF

          # Syslinux
          cat > syslinux/archiso_sys-linux.cfg << "SYSEOF"
          LABEL arch64
          MENU LABEL Arch Linux KDE Live
          LINUX /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          INITRD /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          APPEND archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet
          SYSEOF

          # SystemD-boot
          mkdir -p efiboot/loader/entries
          cat > efiboot/loader/loader.conf << "LOADEREOF"
          default archiso-x86_64-linux.conf
          timeout 3
          LOADEREOF

          cat > efiboot/loader/entries/archiso-x86_64-linux.conf << "ENTRYEOF"
          title Arch Linux KDE Live
          linux /%INSTALL_DIR%/boot/x86_64/vmlinuz-linux
          initrd /%INSTALL_DIR%/boot/x86_64/initramfs-linux.img
          options archisobasedir=%INSTALL_DIR% archisolabel=%ARCHISO_LABEL% quiet
          ENTRYEOF

          # Profile
          cat > profiledef.sh << "PROFILEEOF"
          #!/usr/bin/env bash
          iso_name="archlinux-kde"
          iso_label="ARCH_KDE_$(date +%Y%m)"
          iso_publisher="Arch Linux KDE Live"
          iso_application="Arch Linux KDE Live CD"
          iso_version="$(date +%Y.%m.%d)"
          install_dir="arch"
          buildmodes=("iso")
          bootmodes=("bios.syslinux.mbr" "bios.syslinux.eltorito" "uefi-x64.systemd-boot.esp" "uefi-x64.systemd-boot.eltorito")
          arch="x86_64"
          pacman_conf="pacman.conf"
          airootfs_image_type="squashfs"
          airootfs_image_tool_options=("-comp" "xz" "-b" "1M")
          file_permissions=(
            ["/root"]="0:0:750"
            ["/root/customize_airootfs.sh"]="0:0:755"
            ["/usr/local/bin/arch-installer"]="0:0:755"
          )
          PROFILEEOF
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          echo "=== Archivos del proyecto ==="
          ls -la
          echo "=== Construyendo ISO ==="
          mkarchiso -v -w work -o out .
          ls -la out/
          '
          mkdir -p iso-output
          docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/
          ls -lh ./iso-output/

      - name: Cleanup
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # 🐧 Arch Linux Live CD con KDE Plasma

            ## ✨ Características:
            - **Entorno**: KDE Plasma completo
            - **Usuario**: `liveuser` (sin contraseña, autologin)
            - **Red**: NetworkManager habilitado
            - **Instalador**: Script guiado incluido

            ## 📦 Aplicaciones:
            - Firefox, Konsole, Dolphin, Kate
            - GParted, Instalador de Arch Linux
            - Spectacle, Okular, Gwenview, VLC

            ## 💻 Requisitos:
            - **RAM**: 2GB mín, 4GB recomendado
            - **Arch**: x86_64
            - **Boot**: UEFI/BIOS compatible

            ## 🚀 Uso:
            1. Descarga la ISO
            2. Graba en USB con Rufus/Etcher
            3. Arranca desde USB
            4. Usa "Instalador de Arch Linux" del escritorio

            **Tamaño**: ~2.5GB
          files: iso-output/*.iso
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
