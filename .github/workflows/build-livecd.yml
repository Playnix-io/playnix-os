name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          echo "🔄 Actualizando sistema base..."
          docker exec arch-builder bash -c '
          # Actualizar mirrors primero
          echo "Server = https://mirror.rackspace.com/archlinux/\$repo/os/\$arch" > /etc/pacman.d/mirrorlist
          echo "Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch" >> /etc/pacman.d/mirrorlist
          echo "Server = https://mirror.leaseweb.net/archlinux/\$repo/os/\$arch" >> /etc/pacman.d/mirrorlist

          # Inicializar keyring
          pacman-key --init
          pacman-key --populate archlinux

          # Actualizar sistema
          pacman -Syu --noconfirm

          # Instalar dependencias necesarias
          pacman -S --noconfirm archiso git base-devel wget reflector

          echo "✅ Sistema preparado correctamente"
          '

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* .

          # Copiar todos los archivos del repositorio livecd
          if [ -d /host-workspace/livecd ]; then
            echo "📁 Copiando configuración desde repositorio..."

            # Copiar archivos principales
            cp /host-workspace/livecd/packages.x86_64 . 2>/dev/null || { echo "❌ packages.x86_64 no encontrado"; exit 1; }
            cp /host-workspace/livecd/pacman.conf . 2>/dev/null || { echo "❌ pacman.conf no encontrado"; exit 1; }
            cp /host-workspace/livecd/profiledef.sh . 2>/dev/null || { echo "❌ profiledef.sh no encontrado"; exit 1; }

            # Crear estructura airootfs y copiar customize_airootfs.sh
            mkdir -p airootfs/root
            cp /host-workspace/livecd/customize_airootfs.sh airootfs/root/ 2>/dev/null || { echo "❌ customize_airootfs.sh no encontrado"; exit 1; }
            chmod +x airootfs/root/customize_airootfs.sh

            # Copiar configuración de boot si existe
            if [ -d /host-workspace/livecd/boot ]; then
              echo "🥾 Copiando configuración de boot..."
              cp -r /host-workspace/livecd/boot/* . 2>/dev/null || true
            fi

            echo "✅ Archivos copiados correctamente"
            ls -la
          else
            echo "❌ Directorio livecd no encontrado"
            exit 1
          fi
          '

      - name: Setup installer files
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Crear estructura de directorios
          mkdir -p airootfs/usr/local/bin
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/root/Desktop

          # Copiar instalador desde el repositorio
          if [ -f /host-workspace/installer/arch-installer ]; then
            echo "📥 Copiando instalador desde repositorio..."
            cp /host-workspace/installer/arch-installer airootfs/usr/local/bin/
            chmod +x airootfs/usr/local/bin/arch-installer
          else
            echo "❌ Instalador no encontrado en repositorio"
            exit 1
          fi

          # Copiar archivos desktop desde el repositorio
          if [ -d /host-workspace/installer/desktop ]; then
            echo "🖥️  Copiando archivos desktop desde repositorio..."
            cp /host-workspace/installer/desktop/*.desktop airootfs/etc/skel/Desktop/
            cp /host-workspace/installer/desktop/*.desktop airootfs/root/Desktop/
            chmod +x airootfs/etc/skel/Desktop/*.desktop
            chmod +x airootfs/root/Desktop/*.desktop
          else
            echo "❌ Archivos desktop no encontrados en repositorio"
            exit 1
          fi
          '

      - name: Setup system configuration
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Verificar que los archivos ya están copiados correctamente
          echo "✅ Verificando archivos de configuración..."

          if [ ! -f pacman.conf ]; then
            echo "❌ pacman.conf no encontrado"
            exit 1
          fi

          if [ ! -f airootfs/root/customize_airootfs.sh ]; then
            echo "❌ customize_airootfs.sh no encontrado en airootfs/root/"
            exit 1
          fi

          if [ ! -f profiledef.sh ]; then
            echo "❌ profiledef.sh no encontrado"
            exit 1
          fi

          if [ ! -f packages.x86_64 ]; then
            echo "❌ packages.x86_64 no encontrado"
            exit 1
          fi

          echo "✅ Todos los archivos de configuración están listos"
          echo "📋 Archivos encontrados:"
          ls -la packages.x86_64 pacman.conf profiledef.sh
          ls -la airootfs/root/customize_airootfs.sh
          '

      - name: Setup boot configuration
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Verificar que profiledef.sh existe (ya se copió)
          if [ -f profiledef.sh ]; then
            echo "✅ profiledef.sh encontrado"
          else
            echo "❌ profiledef.sh no encontrado"
            exit 1
          fi

          # Verificar configuración de boot
          echo "🥾 Verificando configuración de boot..."
          if [ -f grub/grub.cfg ]; then
            echo "✅ GRUB configurado"
          fi

          if [ -f efiboot/loader/loader.conf ]; then
            echo "✅ SystemD-Boot configurado"
          fi

          if [ -f syslinux/archiso_sys-linux.cfg ]; then
            echo "✅ SYSLINUX configurado"
          fi

          echo "✅ Configuración de boot verificada"
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          echo "=== Verificando estructura del proyecto antes del build ==="
          echo "📁 Archivos principales:"
          ls -la packages.x86_64 pacman.conf profiledef.sh 2>/dev/null || echo "❌ Faltan archivos principales"
          echo ""
          echo "🔧 Script de customización:"
          ls -la airootfs/root/customize_airootfs.sh 2>/dev/null || echo "❌ customize_airootfs.sh no encontrado"
          echo ""
          echo "🛠️ Instalador:"
          ls -la airootfs/usr/local/bin/arch-installer 2>/dev/null || echo "❌ arch-installer no encontrado"
          echo ""

          # Verificar y contar paquetes
          echo "📦 Análisis de paquetes:"
          echo "Total de paquetes: $(grep -v "^#" packages.x86_64 | grep -v "^$" | wc -l)"
          echo "Primeros 10 paquetes:"
          grep -v "^#" packages.x86_64 | grep -v "^$" | head -10
          echo ""

          # Actualizar mirrors antes del build
          echo "🌐 Actualizando mirrors para el build..."
          reflector --country Spain,France,Germany,Netherlands --latest 10 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
          echo "✅ Mirrors actualizados"
          echo ""

          # Crear directorios necesarios
          mkdir -p work out

          echo "🚀 Iniciando construcción de la ISO..."
          echo "⏰ Esto puede tomar 15-20 minutos..."
          echo ""

          # Ejecutar mkarchiso con mejor captura de errores
          set -o pipefail
          if mkarchiso -v -w work -o out . 2>&1 | tee build.log ; then
            echo ""
            echo "✅ ¡ISO construida exitosamente!"
            echo "📁 Archivos generados:"
            ls -lh out/
          else
            BUILD_EXIT_CODE=$?
            echo ""
            echo "❌ Error en la construcción de la ISO (código: $BUILD_EXIT_CODE)"
            echo ""

            # Mostrar las últimas líneas del build log
            echo "=== ÚLTIMAS 50 LÍNEAS DEL BUILD LOG ==="
            tail -50 build.log 2>/dev/null || echo "No se pudo acceder al log del build"
            echo ""

            # Mostrar información de debug
            echo "=== INFORMACIÓN DE DEBUG ==="
            echo "📁 Contenido del directorio actual:"
            ls -la
            echo ""
            echo "📁 Contenido del directorio work:"
            find work/ -maxdepth 2 -type d 2>/dev/null || echo "Directorio work no accesible"
            echo ""
            echo "📁 Contenido del directorio out:"
            ls -la out/ 2>/dev/null || echo "Directorio out no existe o está vacío"
            echo ""
            echo "💾 Espacio en disco:"
            df -h | head -10
            echo ""
            echo "🧠 Memoria disponible:"
            free -h
            echo ""
            echo "🔍 Buscando errores específicos en el log..."
            grep -i "error\|failed\|cannot\|not found" build.log | tail -10 2>/dev/null || echo "No se encontraron errores específicos"
            echo ""
            echo "📄 Log de pacman (últimas 10 líneas):"
            tail -10 /var/log/pacman.log 2>/dev/null || echo "Log de pacman no disponible"

            exit $BUILD_EXIT_CODE
          fi
          '

          # Solo continuar si el build fue exitoso
          BUILD_SUCCESS=$?
          if [ $BUILD_SUCCESS -eq 0 ]; then
            # Crear directorio de salida en el host
            mkdir -p iso-output

            # Copiar ISO al workspace del host
            echo "📥 Copiando ISO al host..."
            if docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/ 2>/dev/null; then
              echo "✅ ISO copiada correctamente"
            else
              echo "❌ Error copiando la ISO"
              exit 1
            fi

            # Mostrar información del ISO generado
            echo "🎉 ISO lista:"
            ls -lh ./iso-output/

            # Mostrar información adicional de la ISO
            if ls ./iso-output/*.iso 1> /dev/null 2>&1; then
              echo ""
              echo "📊 Detalles de la ISO:"
              for iso in ./iso-output/*.iso; do
                echo "📁 $(basename "$iso"): $(du -h "$iso" | cut -f1)"
              done
            fi
          else
            echo "❌ El build falló, no se puede continuar"
            exit $BUILD_SUCCESS
          fi

      - name: Cleanup
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # 🐧 Arch Linux Live CD con KDE Plasma

            ## ✨ Características:
            - **Entorno**: KDE Plasma completo
            - **Usuario**: `liveuser` (sin contraseña, autologin)
            - **Instalador**: Automático para disco NVMe
            - **Usuario instalado**: `playnix` / `playnix`

            ## 📁 Estructura del proyecto:
            ```
            ├── livecd/                    # Configuración del Live CD
            │   ├── packages.x86_64        # Lista de paquetes
            │   ├── pacman.conf           # Configuración de pacman
            │   ├── customize_airootfs.sh # Script de personalización
            │   └── boot/                 # Configuración de arranque
            └── installer/                # Instalador automático
                ├── arch-installer        # Script principal
                └── desktop/              # Archivos .desktop
            ```

            ## 🔧 Personalización:
            - Modifica archivos en `/livecd/` para el sistema live
            - Modifica archivos en `/installer/` para el instalador
            - El workflow los usa automáticamente

            ## 📦 Aplicaciones incluidas:
            - Firefox, KDE Plasma, Konsole, Dolphin
            - GParted, Instalador automático
            - Herramientas de sistema y desarrollo

            **Tamaño aproximado**: ~2.5GB
          files: iso-output/*.iso
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
