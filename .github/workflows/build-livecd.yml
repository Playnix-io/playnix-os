name: Build Arch Linux KDE Live CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-livecd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arch Linux container
        run: |
          # Descargar imagen de Arch Linux
          docker pull archlinux:latest

          # Crear contenedor con privilegios necesarios
          docker run -d --name arch-builder --privileged \
            -v $PWD:/host-workspace \
            archlinux:latest sleep infinity

          # Actualizar sistema y instalar dependencias
          docker exec arch-builder pacman -Syu --noconfirm
          docker exec arch-builder pacman -S --noconfirm archiso git base-devel wget

      - name: Create archiso profile
        run: |
          docker exec arch-builder bash -c '
          # Crear directorio de trabajo
          mkdir -p /build/archiso-kde
          cd /build/archiso-kde

          # Copiar perfil base de archiso
          cp -r /usr/share/archiso/configs/releng/* .

          # Copiar todos los archivos del repositorio livecd
          if [ -d /host-workspace/livecd ]; then
            echo "📁 Copiando configuración desde repositorio..."
            cp -r /host-workspace/livecd/* . 2>/dev/null || true
            ls -la
          else
            echo "❌ Directorio livecd no encontrado"
            exit 1
          fi
          '

      - name: Setup installer files
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Crear estructura de directorios
          mkdir -p airootfs/usr/local/bin
          mkdir -p airootfs/etc/skel/Desktop
          mkdir -p airootfs/root/Desktop

          # Copiar instalador desde el repositorio
          if [ -f /host-workspace/installer/arch-installer ]; then
            echo "📥 Copiando instalador desde repositorio..."
            cp /host-workspace/installer/arch-installer airootfs/usr/local/bin/
            chmod +x airootfs/usr/local/bin/arch-installer
          else
            echo "❌ Instalador no encontrado en repositorio"
            exit 1
          fi

          # Copiar archivos desktop desde el repositorio
          if [ -d /host-workspace/installer/desktop ]; then
            echo "🖥️  Copiando archivos desktop desde repositorio..."
            cp /host-workspace/installer/desktop/*.desktop airootfs/etc/skel/Desktop/
            cp /host-workspace/installer/desktop/*.desktop airootfs/root/Desktop/
            chmod +x airootfs/etc/skel/Desktop/*.desktop
            chmod +x airootfs/root/Desktop/*.desktop
          else
            echo "❌ Archivos desktop no encontrados en repositorio"
            exit 1
          fi
          '

      - name: Setup system configuration
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Los archivos ya se copiaron en el paso anterior
          # Solo verificar que existen los archivos necesarios
          echo "✅ Verificando archivos de configuración..."

          if [ ! -f pacman.conf ]; then
            echo "❌ pacman.conf no encontrado"
            exit 1
          fi

          if [ ! -f airootfs/root/customize_airootfs.sh ]; then
            echo "❌ customize_airootfs.sh no encontrado"
            exit 1
          fi

          # Hacer ejecutable el script de customización
          chmod +x airootfs/root/customize_airootfs.sh

          echo "✅ Todos los archivos de configuración están listos"
          '

      - name: Setup boot configuration
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde

          # Los archivos de boot ya se copiaron, solo verificar profiledef.sh
          if [ ! -f profiledef.sh ]; then
            echo "❌ profiledef.sh no encontrado, creando por defecto..."
            cat > profiledef.sh << "PROFILEEOF"
          #!/usr/bin/env bash
          iso_name="playnix-arch-kde"
          iso_label="PLAYNIX_$(date +%Y%m)"
          iso_publisher="PlayNix Arch Linux KDE"
          iso_application="PlayNix Arch Linux KDE Live CD"
          iso_version="$(date +%Y.%m.%d)"
          install_dir="arch"
          buildmodes=("iso")
          bootmodes=("bios.syslinux.mbr" "bios.syslinux.eltorito" "uefi-x64.systemd-boot.esp" "uefi-x64.systemd-boot.eltorito")
          arch="x86_64"
          pacman_conf="pacman.conf"
          airootfs_image_type="squashfs"
          airootfs_image_tool_options=("-comp" "xz" "-b" "1M")
          file_permissions=(
            ["/root"]="0:0:750"
            ["/root/customize_airootfs.sh"]="0:0:755"
            ["/usr/local/bin/arch-installer"]="0:0:755"
          )
          PROFILEEOF
          fi

          echo "✅ Configuración de boot verificada"
          '

      - name: Build ISO
        run: |
          docker exec arch-builder bash -c '
          cd /build/archiso-kde
          echo "=== Estructura del proyecto ==="
          find . -type f -name "*.sh" -o -name "*.conf" -o -name "*.cfg" -o -name "packages.x86_64" | head -20
          echo ""
          echo "=== Construyendo ISO ==="
          mkarchiso -v -w work -o out .
          echo ""
          echo "=== ISO generada ==="
          ls -la out/
          '
          mkdir -p iso-output
          docker cp arch-builder:/build/archiso-kde/out/. ./iso-output/
          ls -lh ./iso-output/

      - name: Cleanup
        if: always()
        run: |
          docker stop arch-builder || true
          docker rm arch-builder || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-kde-livecd
          path: iso-output/*.iso
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Arch Linux KDE Live CD v${{ github.run_number }}
          body: |
            # 🐧 Arch Linux Live CD con KDE Plasma

            ## ✨ Características:
            - **Entorno**: KDE Plasma completo
            - **Usuario**: `liveuser` (sin contraseña, autologin)
            - **Instalador**: Automático para disco NVMe
            - **Usuario instalado**: `playnix` / `playnix`

            ## 📁 Estructura del proyecto:
            ```
            ├── livecd/                    # Configuración del Live CD
            │   ├── packages.x86_64        # Lista de paquetes
            │   ├── pacman.conf           # Configuración de pacman
            │   ├── customize_airootfs.sh # Script de personalización
            │   └── boot/                 # Configuración de arranque
            └── installer/                # Instalador automático
                ├── arch-installer        # Script principal
                └── desktop/              # Archivos .desktop
            ```

            ## 🔧 Personalización:
            - Modifica archivos en `/livecd/` para el sistema live
            - Modifica archivos en `/installer/` para el instalador
            - El workflow los usa automáticamente

            ## 📦 Aplicaciones incluidas:
            - Firefox, KDE Plasma, Konsole, Dolphin
            - GParted, Instalador automático
            - Herramientas de sistema y desarrollo

            **Tamaño aproximado**: ~2.5GB
          files: iso-output/*.iso
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
