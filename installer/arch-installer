#!/bin/bash

# Arch Linux Automatic Installer - 100% Automático
# Instala Arch Linux + KDE en disco NVMe automáticamente
# Usuario: playnix | Contraseña: playnix

set -e

# Colores para output
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
NC="\033[0m"

# Configuración del instalador
INSTALL_USER="playnix"
INSTALL_PASSWORD="playnix"
INSTALL_HOSTNAME="playnix-arch"
ROOT_PASSWORD="playnix"

# Funciones de output
print_msg() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_title() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

check_root() {
    if [ $(id -u) -ne 0 ]; then
        print_error "Este script debe ejecutarse como root"
        exit 1
    fi
}

check_internet() {
    print_msg "Verificando conexión a internet..."
    if ! ping -c 1 archlinux.org > /dev/null 2>&1; then
        print_error "No hay conexión a internet"
        exit 1
    fi
    print_msg "Conexión a internet OK"
}

detect_nvme() {
    print_msg "Detectando disco NVMe..."

    # Buscar discos NVMe
    NVME_DISK=""
    for disk in /dev/nvme*n1; do
        if [ -b "$disk" ]; then
            NVME_DISK="$disk"
            break
        fi
    done

    if [ -z "$NVME_DISK" ]; then
        print_error "No se encontró disco NVMe. Buscando alternativas..."
        # Buscar otros discos como respaldo
        for disk in /dev/sda /dev/sdb /dev/vda; do
            if [ -b "$disk" ]; then
                NVME_DISK="$disk"
                print_warning "Usando $disk como disco de instalación"
                break
            fi
        done
    fi

    if [ -z "$NVME_DISK" ]; then
        print_error "No se encontró ningún disco para instalar"
        exit 1
    fi

    print_msg "Disco seleccionado: $NVME_DISK"
    echo "$NVME_DISK"
}

partition_disk_auto() {
    local DISK="$1"
    print_title "Particionando disco automáticamente: $DISK"

    # Limpiar disco completamente
    print_msg "Limpiando disco..."
    wipefs -af "$DISK"
    sgdisk --zap-all "$DISK"

    # Crear tabla de particiones GPT
    print_msg "Creando tabla de particiones GPT..."

    if [ -d /sys/firmware/efi/efivars ]; then
        print_msg "Sistema UEFI - Creando particiones EFI + Root"
        # UEFI: EFI (512MB) + Root (resto)
        sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"EFI" "$DISK"
        sgdisk -n 2:0:0 -t 2:8300 -c 2:"Root" "$DISK"

        # Variables para particiones
        EFI_PART="${DISK}p1"
        ROOT_PART="${DISK}p2"

        # Si es un disco SATA, usar formato /dev/sdaX
        if [[ "$DISK" == /dev/sd* ]]; then
            EFI_PART="${DISK}1"
            ROOT_PART="${DISK}2"
        fi
    else
        print_msg "Sistema BIOS - Creando partición Root única"
        # BIOS: Solo Root
        sgdisk -n 1:0:0 -t 1:8300 -c 1:"Root" "$DISK"
        ROOT_PART="${DISK}p1"

        if [[ "$DISK" == /dev/sd* ]]; then
            ROOT_PART="${DISK}1"
        fi
    fi

    # Esperar a que el kernel reconozca las particiones
    print_msg "Esperando reconocimiento de particiones..."
    sleep 3
    partprobe "$DISK"
    sleep 2
}

format_partitions_auto() {
    print_title "Formateando particiones automáticamente"

    if [ -d /sys/firmware/efi/efivars ]; then
        print_msg "Formateando partición EFI: $EFI_PART"
        mkfs.fat -F32 "$EFI_PART"

        print_msg "Formateando partición Root: $ROOT_PART"
        mkfs.ext4 -F "$ROOT_PART"

        print_msg "Montando particiones..."
        mount "$ROOT_PART" /mnt
        mkdir -p /mnt/boot/efi
        mount "$EFI_PART" /mnt/boot/efi
    else
        print_msg "Formateando partición Root: $ROOT_PART"
        mkfs.ext4 -F "$ROOT_PART"

        print_msg "Montando partición..."
        mount "$ROOT_PART" /mnt
    fi
}

install_base_auto() {
    print_title "Instalando sistema base automáticamente"

    print_msg "Actualizando mirrors..."
    reflector --country Spain,France,Germany --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

    print_msg "Instalando paquetes base..."
    pacstrap /mnt base linux linux-firmware base-devel grub networkmanager

    print_msg "Generando fstab..."
    genfstab -U /mnt >> /mnt/etc/fstab
}

install_kde_auto() {
    print_title "Instalando KDE Plasma automáticamente"

    print_msg "Instalando KDE y aplicaciones..."
    arch-chroot /mnt pacman -S --noconfirm \
        plasma-desktop \
        sddm \
        konsole \
        dolphin \
        kate \
        firefox \
        spectacle \
        okular \
        gwenview \
        ark \
        breeze \
        breeze-gtk \
        kde-gtk-config \
        plasma-nm \
        plasma-pa \
        powerdevil \
        kscreen \
        systemsettings

    print_msg "Habilitando SDDM..."
    arch-chroot /mnt systemctl enable sddm.service
}

configure_system_auto() {
    print_title "Configurando sistema automáticamente"

    print_msg "Configurando zona horaria..."
    arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Madrid /etc/localtime
    arch-chroot /mnt hwclock --systohc

    print_msg "Configurando idioma..."
    arch-chroot /mnt sed -i "s/#es_ES.UTF-8/es_ES.UTF-8/" /etc/locale.gen
    arch-chroot /mnt sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
    arch-chroot /mnt locale-gen
    echo "LANG=es_ES.UTF-8" > /mnt/etc/locale.conf
    echo "KEYMAP=es" > /mnt/etc/vconsole.conf

    print_msg "Configurando hostname..."
    echo "$INSTALL_HOSTNAME" > /mnt/etc/hostname
    cat > /mnt/etc/hosts << EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   $INSTALL_HOSTNAME.localdomain $INSTALL_HOSTNAME
EOF

    print_msg "Configurando contraseña de root..."
    arch-chroot /mnt bash -c "echo 'root:$ROOT_PASSWORD' | chpasswd"

    print_msg "Creando usuario $INSTALL_USER..."
    arch-chroot /mnt useradd -m -G wheel,audio,video,storage,optical,network,power -s /bin/bash "$INSTALL_USER"
    arch-chroot /mnt bash -c "echo '$INSTALL_USER:$INSTALL_PASSWORD' | chpasswd"

    print_msg "Configurando sudo..."
    arch-chroot /mnt sed -i "s/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/" /etc/sudoers

    print_msg "Habilitando NetworkManager..."
    arch-chroot /mnt systemctl enable NetworkManager.service
}

install_bootloader_auto() {
    print_title "Instalando bootloader automáticamente"

    if [ -d /sys/firmware/efi/efivars ]; then
        print_msg "Instalando GRUB para UEFI..."
        arch-chroot /mnt pacman -S --noconfirm efibootmgr
        arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH
    else
        print_msg "Instalando GRUB para BIOS..."
        arch-chroot /mnt grub-install --target=i386-pc "$NVME_DISK"
    fi

    print_msg "Generando configuración de GRUB..."
    arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
}

configure_sddm_auto() {
    print_title "Configurando SDDM para autologin"

    print_msg "Configurando autologin para usuario $INSTALL_USER..."
    mkdir -p /mnt/etc/sddm.conf.d
    cat > /mnt/etc/sddm.conf.d/autologin.conf << EOF
[Autologin]
User=$INSTALL_USER
Session=plasma

[Theme]
Current=breeze

[General]
HaltCommand=/usr/bin/systemctl poweroff
RebootCommand=/usr/bin/systemctl reboot
EOF
}

configure_user_environment() {
    print_title "Configurando entorno del usuario"

    print_msg "Configurando bashrc para $INSTALL_USER..."
    cat >> /mnt/home/$INSTALL_USER/.bashrc << EOF

# Configuración personalizada PlayNix
export EDITOR=nano
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Mensaje de bienvenida
echo ""
echo "🎮 Bienvenido a PlayNix Arch Linux + KDE 🎮"
echo "Usuario: $INSTALL_USER"
echo "Sistema: Arch Linux con KDE Plasma"
echo ""
EOF

    print_msg "Configurando permisos del usuario..."
    arch-chroot /mnt chown -R $INSTALL_USER:$INSTALL_USER /home/$INSTALL_USER
}

install_additional_software() {
    print_title "Instalando software adicional"

    print_msg "Instalando herramientas adicionales..."
    arch-chroot /mnt pacman -S --noconfirm \
        htop \
        fastfetch \
        git \
        vim \
        nano \
        wget \
        curl \
        zip \
        unzip \
        p7zip \
        tree \
        lsof \
        which \
        man-db \
        man-pages \
        bash-completion

    print_msg "Instalando codecs multimedia..."
    arch-chroot /mnt pacman -S --noconfirm \
        pipewire \
        pipewire-alsa \
        pipewire-pulse \
        pipewire-jack \
        wireplumber \
        pavucontrol

    print_msg "Instalando fuentes..."
    arch-chroot /mnt pacman -S --noconfirm \
        ttf-dejavu \
        ttf-liberation \
        noto-fonts \
        noto-fonts-emoji
}

cleanup_installation() {
    print_msg "Limpiando instalación..."
    arch-chroot /mnt pacman -Scc --noconfirm

    # Limpiar logs
    rm -rf /mnt/var/log/*
    rm -rf /mnt/tmp/*
    rm -rf /mnt/var/tmp/*
}

show_installation_summary() {
    print_title "RESUMEN DE LA INSTALACIÓN"
    echo ""
    print_msg "✅ Sistema: Arch Linux + KDE Plasma"
    print_msg "✅ Disco: $NVME_DISK"
    print_msg "✅ Usuario: $INSTALL_USER"
    print_msg "✅ Contraseña: $INSTALL_PASSWORD"
    print_msg "✅ Hostname: $INSTALL_HOSTNAME"
    print_msg "✅ Autologin: Habilitado"
    print_msg "✅ NetworkManager: Habilitado"
    print_msg "✅ SDDM: Configurado"
    echo ""
}

main_auto() {
    print_title "🎮 INSTALADOR AUTOMÁTICO PLAYNIX 🎮"
    print_title "Arch Linux + KDE Plasma - Instalación 100% Automática"
    echo ""
    print_msg "Configuración del sistema:"
    print_msg "• Usuario: $INSTALL_USER"
    print_msg "• Contraseña: $INSTALL_PASSWORD"
    print_msg "• Hostname: $INSTALL_HOSTNAME"
    print_msg "• Entorno: KDE Plasma"
    print_msg "• Autologin: Habilitado"
    echo ""

    check_root
    check_internet

    # Detectar disco NVMe
    NVME_DISK=$(detect_nvme)

    print_warning "🚨 ATENCIÓN: SE INSTALARÁ EN $NVME_DISK 🚨"
    print_warning "TODOS LOS DATOS EN $NVME_DISK SERÁN ELIMINADOS PERMANENTEMENTE"
    echo ""
    print_msg "⏰ La instalación comenzará en 15 segundos..."
    print_msg "❌ Presiona Ctrl+C para CANCELAR"

    for i in {15..1}; do
        echo -ne "\r⏳ Iniciando en: $i segundos... "
        sleep 1
    done
    echo ""

    print_title "🚀 INICIANDO INSTALACIÓN AUTOMÁTICA"

    # Proceso de instalación
    partition_disk_auto "$NVME_DISK" || { print_error "Error en particionado"; exit 1; }
    format_partitions_auto || { print_error "Error en formateo"; exit 1; }
    install_base_auto || { print_error "Error en instalación base"; exit 1; }
    install_kde_auto || { print_error "Error en instalación KDE"; exit 1; }
    configure_system_auto || { print_error "Error en configuración sistema"; exit 1; }
    install_bootloader_auto || { print_error "Error en bootloader"; exit 1; }
    configure_sddm_auto || { print_error "Error en configuración SDDM"; exit 1; }
    configure_user_environment || { print_error "Error en configuración usuario"; exit 1; }
    install_additional_software || { print_error "Error en software adicional"; exit 1; }
    cleanup_installation || { print_error "Error en limpieza"; exit 1; }

    # Finalizar
    print_msg "🔄 Desmontando particiones..."
    umount -R /mnt || { print_warning "Algunos sistemas de archivos no se pudieron desmontar"; }

    show_installation_summary

    print_title "🎉 ¡INSTALACIÓN COMPLETADA EXITOSAMENTE! 🎉"
    print_warning "📱 IMPORTANTE: Retira el USB de instalación antes de reiniciar"
    print_msg "🔄 El sistema está listo para usar"
    echo ""

    read -p "🔄 ¿Reiniciar ahora? (y/n): " reboot_choice
    if [ "$reboot_choice" = "y" ] || [ "$reboot_choice" = "Y" ]; then
        print_msg "🔄 Reiniciando sistema en 5 segundos..."
        for i in {5..1}; do
            echo -ne "\r⏳ Reiniciando en: $i..."
            sleep 1
        done
        echo ""
        reboot
    else
        print_msg "✅ Instalación completada. Reinicia manualmente cuando estés listo."
    fi
}

show_help() {
    echo "🎮 Instalador Automático PlayNix - Arch Linux + KDE"
    echo ""
    echo "OPCIONES:"
    echo "  auto     - Instalación 100% automática (por defecto)"
    echo "  manual   - Abrir guía manual de instalación"
    echo "  info     - Mostrar información del sistema"
    echo "  help     - Mostrar esta ayuda"
    echo ""
    echo "CONFIGURACIÓN AUTOMÁTICA:"
    echo "  • Disco: Primer NVMe encontrado (/dev/nvme0n1 o similar)"
    echo "  • Usuario: $INSTALL_USER"
    echo "  • Contraseña: $INSTALL_PASSWORD"
    echo "  • Hostname: $INSTALL_HOSTNAME"
    echo "  • Entorno: KDE Plasma completo"
    echo "  • Autologin: Habilitado para $INSTALL_USER"
    echo "  • Bootloader: GRUB (UEFI/BIOS automático)"
    echo ""
    echo "ADVERTENCIAS:"
    echo "  ⚠️  Todos los datos del disco serán ELIMINADOS"
    echo "  ⚠️  Asegúrate de tener backups importantes"
    echo "  ⚠️  Verifica que el disco NVMe esté conectado"
    echo ""
}

show_system_info() {
    print_title "Información del Sistema"
    echo ""
    print_msg "Discos disponibles:"
    lsblk -f
    echo ""
    print_msg "Memoria RAM:"
    free -h
    echo ""
    print_msg "Modo de arranque:"
    if [ -d /sys/firmware/efi/efivars ]; then
        echo "✅ UEFI"
    else
        echo "✅ BIOS Legacy"
    fi
    echo ""
    print_msg "Conexión de red:"
    if ping -c 1 archlinux.org > /dev/null 2>&1; then
        echo "✅ Conectado a internet"
    else
        echo "❌ Sin conexión a internet"
    fi
}

# Manejo de parámetros
case "${1:-auto}" in
    "auto"|"install"|"")
        main_auto
        ;;
    "manual")
        print_msg "Abriendo guía manual de instalación..."
        firefox "https://wiki.archlinux.org/title/Installation_guide" &
        ;;
    "info")
        show_system_info
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_error "Opción desconocida: $1"
        echo ""
        show_help
        exit 1
        ;;
esac